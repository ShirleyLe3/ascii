function*t(t=0,e=1/0,r=1){for(let n=t;e>n;n+=r)yield n}const e=Object.assign,r=t=>{const e=new Set;for(let r=t;r&&r!==Object.prototype;r=Object.getPrototypeOf(r))Object.getOwnPropertyNames(r).forEach(t=>e.add(t));return e},n=(...t)=>(...r)=>e(i("canvas")(...t).getContext("2d"),...r),i=t=>(...r)=>e(document.createElement(t),...r),a=String.fromCharCode,s=t=>t.charCodeAt(0),o=t=>{const e=n()({font:`1em ${t}`}),r=e.measureText(" ");return t=>e.measureText(t).width===r.width},l=a(...t(32,95),...t(96,127),...t(161,168),...t(174,178),169,171,172,180,181,183,187,191,215,247,...t(8216,8227),8249,8250,8729,8730,8734),u=l.replace(/[^\x00-\xff]/g,""),h=l.replace(/[^\x00-\x7f]/g,""),f={__proto__:null,unicode:l,extended:u,ascii:h},c=t=>t>.04045?((t+.055)/1.055)**2.4:t/12.92,{abs:g,clz32:m,floor:d,max:x,random:v,round:p}=Math,b=t=>1<<x(0,31-m(t)),y=(t,e,r)=>{const i=(t=>t instanceof CanvasRenderingContext2D?t.canvas:t)(t);let a=e*b(i.width/e-1),s=r*b(i.height/r-1);const o=n({width:a,height:s})();if(o.drawImage(i,0,0,a,s),e===a&&r===s)return o;for(let t,n;t=a>e,n=s>r,t||n;)o.drawImage(o.canvas,0,0,a,s,0,0,a>>=+t,s>>=+n);const l=n({width:e,height:r})();return l.drawImage(o.canvas,0,0),l},w=(t,e)=>{const{fontWidth:r,fontHeight:i,fontFamily:s,fontBlur:o,fontGamma:l}=e,{fontBase:u,lutWidth:h,lutHeight:f,lutPadding:g,lutGamma:m}=e,d=2*g+h,x=2*g+f,v=p(d/h*r),b=p(x/f*i),w=n({width:v,height:b})(),P=a(t);w.fillStyle="#00f",w.fillRect(0,0,v,b),w.translate(v/2,b/2),w.fillStyle="#000",w.fillRect(-r/2,-i/2,r,i),w.translate(0,i*(.5-u)),w.fillStyle="#fff",w.textAlign="center",w.font=`${i}px ${s}`;for(let t=0,e=1,r=1;o>t;[e,r]=[r,r+e])w.filter=`blur(${r}px)`,w.globalAlpha=(++t/o)**l,w.fillText(P,0,0);const S=new T(h,f),F=y(w,d,x).getImageData(g,g,h,f).data;for(let t=0;S.length>t;t++)S[t]=c(F[t<<2]/255)**m;return S},P=(...t)=>{const e=t[0].length,r=t.length,n=new T(e,r);for(let i=0;r>i;i++)n.set(t[i],i*e);return n};class T extends Float32Array{constructor(t,e){super(t*e),this.width=t,this.height=e}normalize(t,e){for(let r=0;this.length>r;r++)this[r]=(this[r]-t)/(e-t)}compare(t){let e=0;for(let r=this.length;r--;)e+=g(this[r]-t[r]);return e}}class S{constructor(){this.charSet=h,this.fontFamily="monospace",this.fontBase=.25,this.fontWidth=40,this.fontHeight=70,this.fontBlur=9,this.fontGamma=1,this.lutWidth=5,this.lutHeight=7,this.lutPadding=1,this.lutMin=0,this.lutMax=1,this.lutGamma=1,this.brightness=1,this.gamma=1,this.noise=0}}class F{constructor(t){this.settings=new S,e(this.settings,t),this.api=n()(),this.charMap=this.makeCharMap(),this.luts=this.makeLUTs()}makeCharMap(){const{charSet:t,fontFamily:e}=this.settings,r=[...t].filter(o(e)).map(s);return Uint16Array.from(r)}makeLUTs(){const{charMap:t,settings:e}=this,{lutMin:r,lutMax:n}=e,i=Array.from(t,t=>w(t,e)),a=i.reduce((t,e)=>x(t,...e),0);for(const t of i)t.normalize(r*a,n*a);return i}render(t,e,r){return[...this.lines(t,d(e),d(r))].join("\n")}}class A extends F{*lines(t,e,r){const{settings:n,charMap:i,luts:s}=this,{lutWidth:o,lutHeight:l,brightness:u,gamma:h,noise:f}=n,g=o*e,m=l*r,d=y(t,g,m).getImageData(0,0,g,m).data,x=new Float32Array(o*l);for(let t=0;m>t;t+=l){const e=[];for(let r=0;g>r;r+=o){let n=0,a=1/0;for(let e=0;l>e;e++)for(let i=0;o>i;i++){let a=r+i+(t+e)*g<<2;const s=u*(.2126*c(d[a++]/255)+.7152*c(d[a++]/255)+.0722*c(d[a++]/255))**h,o=f*(v()-.5);x[n++]=s+o}for(let t=s.length;t--;){const e=s[t].compare(x);a>e&&(a=e,n=t)}e.push(i[n])}yield a(...e)}}}const M=(t,e={},n="$")=>Function(`{${[...r(e)]}}`,n,`return \`${t}\``)(e,e),$=5,U=5121,C=5126,D=6408,L=35632,R=35633,B=3553,I=33984,E=36160,G=36064,_=6403,O=33326,W=(t,...e)=>{const r=i("canvas")().getContext("webgl2",t);if(!r)throw Error("WebGL2 is not available");for(const t of e)if(!r.getExtension(t))throw Error(`"${t}" extension is not available`);return r},z=(t,e,r)=>{const n="#version 300 es\n"+r,i=t.createShader(e);if(t.shaderSource(i,n),t.compileShader(i),!t.getShaderParameter(i,35713))throw Error(`Shader error:\n${t.getShaderInfoLog(i)}\n${V(n)}\n`);return i},H=(t,e,r)=>{const n=t.createProgram();if(t.attachShader(n,e),t.attachShader(n,r),t.linkProgram(n),!t.getProgramParameter(n,35714))throw Error(`Program error: ${t.getProgramInfoLog(n)}`);return n},j=(t,e=34962)=>{const r=t.createBuffer();return Y(t,r,r=>t.bindBuffer(e,r))},k=(t,e=B)=>{const r=t.createTexture();return Y(t,r,r=>t.bindTexture(e,r))},X=(t,e=E)=>{const r=t.createFramebuffer();return Y(t,r,r=>t.bindFramebuffer(e,r))},N=(t,e)=>r=>t.getUniformLocation(e,r),V=(t,e=1)=>t.replace(/^.*/gm,t=>((t,e)=>"0".repeat(x(0,t-e.length))+e)(5,`${e++}: `)+t),Y=(t,e,r)=>n=>(n&&(r(e),n(t,e),r(null)),e),q="in vec2 aPosition;\nout vec2 vPosition;\nvoid main() {\nvPosition = 0.5 + 0.5*aPosition;\ngl_Position = vec4(aPosition, 0., 1.);\n}\n",J="#define MAP3(f, v) vec3(f(v.x), f(v.y), f(v.z))\n#define RGB(x) mix(x/12.92, pow((x+.055)/1.055, 2.4), step(.04045, x))\n#define LUM(x) dot(x, vec3(.2126, .7152, .0722))\nprecision mediump float;\nuniform sampler2D uSrc;\nuniform float uBrightness;\nuniform float uGamma;\nuniform float uNoise;\nuniform float uRandom;\nin vec2 vPosition;\nout vec4 vFragColor;\nfloat hash13(vec3 p3) {\np3 = fract(p3 * 0.1031);\np3 += dot(p3, p3.yzx + 19.19);\nreturn fract((p3.x + p3.y) * p3.z);\n}\nvoid main() {\nvec3 srgb = texture(uSrc, vPosition).rgb;\nfloat signal = uBrightness * pow(LUM(MAP3(RGB, srgb)), uGamma);\nfloat noise = uNoise * (hash13(vec3(gl_FragCoord.xy, 1000.*uRandom)) - 0.5);\nvFragColor = vec4(vec3(clamp(signal + noise, 0., 1.)), 0.);\n}\n",K="#define U ${settings.lutWidth}\n#define V ${settings.lutHeight}\n#define X ${lut.width}\n#define Y ${lut.height}\nprecision mediump float;\nuniform sampler2D uSrc;\nuniform sampler2D uLUT;\nin vec2 vPosition;\nout vec4 vFragColor;\nstruct Result {\nint index;\nfloat value;\n};\nvoid main() {\nResult res = Result(0, float(X));\nivec2 pos = ivec2(vec2(textureSize(uSrc, 0))*vPosition) - ivec2(U, V)/2;\nfloat src[X];\nfor (int v = 0; v < V; v++)\nfor (int u = 0; u < U; u++)\nsrc[u + v*U] = texelFetch(uSrc, pos + ivec2(u, v), 0).r;\nfor (int y = 0; y < Y; y++) {\nfloat value = 0.;\nfor (int x = 0; x < X; x++)\nvalue += abs(src[x] - texelFetch(uLUT, ivec2(x, y), 0).r);\nif (res.value > value)\nres = Result(y, value);\n}\nvFragColor = vec4(res.index, 0, 0, 0);\n}\n",Q=t=>{t.texParameteri(B,10241,9728),t.texParameteri(B,10240,9728)},Z=t=>e=>{const r=Float32Array.of(1,1,-1,1,1,-1,-1,-1);e.bufferData(34962,r,35044),e.vertexAttribPointer(t,2,C,!1,0,0),e.enableVertexAttribArray(t)};class tt extends F{constructor(t){super(t),this.gl=W({},"EXT_color_buffer_float"),this.fbo=X(this.gl)(),this.txLUT=k(this.gl)(Q),this.txOdd=k(this.gl)(Q),this.txEven=k(this.gl)(Q),this.lut=P(...this.luts),this.indices=new Float32Array;const e=z(this.gl,R,M(q,this)),r=z(this.gl,L,M(J,this)),n=z(this.gl,L,M(K,this));this.pass1=H(this.gl,e,r),this.pass2=H(this.gl,e,n),j(this.gl)(Z(0))}*lines(t,e,r){const{settings:n,charMap:i,lut:s,gl:o,pass1:l,pass2:u,fbo:h,txLUT:f,txOdd:c,txEven:g}=this,m=n.lutWidth*e,d=n.lutHeight*r,x=y(t,m,d),v=N(o,l),p=N(o,u);this.indices.length!==e*r&&(this.indices=new Float32Array(e*r)),o.bindFramebuffer(E,h),o.activeTexture(I+2),o.bindTexture(B,f),o.texImage2D(B,0,O,s.width,s.height,0,_,C,s),o.activeTexture(I+1),o.bindTexture(B,c),o.texImage2D(B,0,D,D,U,x.canvas),o.activeTexture(I+0),o.bindTexture(B,g),o.texImage2D(B,0,O,m,d,0,_,C,null),o.framebufferTexture2D(E,G,B,g,0),o.useProgram(l),o.uniform1i(v("uSrc"),1),o.uniform1f(v("uBrightness"),n.brightness),o.uniform1f(v("uGamma"),n.gamma),o.uniform1f(v("uNoise"),n.noise),o.uniform1f(v("uRandom"),Math.random()),o.viewport(0,0,m,d),o.drawArrays($,0,4),o.activeTexture(I+1),o.bindTexture(B,g),o.activeTexture(I+0),o.bindTexture(B,c),o.texImage2D(B,0,O,m,d,0,_,C,null),o.framebufferTexture2D(E,G,B,c,0),o.useProgram(u),o.uniform1i(p("uSrc"),1),o.uniform1i(p("uLUT"),2),o.viewport(0,0,e,r),o.drawArrays($,0,4),o.readPixels(0,0,e,r,_,C,this.indices),o.bindFramebuffer(E,null);for(let t=0;this.indices.length>t;){const r=this.indices.subarray(t,t+=e),n=Array.from(r,t=>i[t]);yield a(...n)}}}export{A as CPURenderer,tt as GPURenderer,T as LUT,F as Renderer,S as Settings,f as charSets,P as combine,w as fromCharCode};
//# sourceMappingURL=bundle.esm.min.js.map
