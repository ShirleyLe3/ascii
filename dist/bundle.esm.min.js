const t=Object.assign,n=(...n)=>(...r)=>t(i("canvas")(...n).getContext("2d"),...r),i=n=>(...i)=>t(document.createElement(n),...i),r=String.fromCharCode,e=t=>t.charCodeAt(0),s=t=>{const[n,i]=[...t].map(e),s=[...Array(i-n).keys()].map(t=>n+t);return r(...s,i)},o=s(" ^")+s("`~"),a=o+s("¡§")+"®°±©«¬´µ·»¿×÷",h=a+s("‘•")+"‹›∙√∞",c={__proto__:null,ascii:o,extended:a,extra:h},u=t=>t>.04045?((t+.055)/1.055)**2.4:t/12.92,{abs:l,clz32:f,floor:v,max:d,random:m,round:g}=Math,p=t=>t instanceof CanvasRenderingContext2D?t.canvas:t,x=t=>1<<d(0,31-f(t)),_=(t,i,r)=>{const e=p(t);let s=i*x(e.width/i-1),o=r*x(e.height/r-1);const a=((t,i,r)=>{const e=n({width:i,height:r})();return e.drawImage(p(t),0,0,i,r),e})(t,s,o);if(i===s&&r===o)return a;for(let t,n;t=s>i,n=o>r,t||n;)a.drawImage(a.canvas,0,0,s,o,0,0,s>>=+t,o>>=+n);return((t,i,r,e,s)=>{const o=n({width:e,height:s})();return o.drawImage(p(t),i,r,e,s,0,0,e,s),o})(a,0,0,i,r)},w=(t,n,i)=>{const{width:r,height:e}=p(t);return n!==r||i!==e?_(t,n,i):t};class y extends Float32Array{constructor(t,n){super(t*n),this.width=t,this.height=n}static fromCharCode(t,i){const{fontWidth:e,fontHeight:s,fontFamily:o,fontBlur:a,fontGamma:h}=i,{fontBase:c,lutWidth:l,lutHeight:f,lutPadding:v,lutGamma:d}=i,m=2*v+l,p=2*v+f,x=g(m/l*e),w=g(p/f*s),$=n({width:x,height:w})(),b=r(t);$.fillStyle="#00f",$.fillRect(0,0,x,w),$.translate(x/2,w/2),$.fillStyle="#000",$.fillRect(-e/2,-s/2,e,s),$.translate(0,s*(.5-c)),$.fillStyle="#fff",$.textAlign="center",$.font=`${s}px ${o}`;for(let t=0,n=1,i=1;a>t;[n,i]=[i,i+n])$.filter=`blur(${i}px)`,$.globalAlpha=(++t/a)**h,$.fillText(b,0,0);const C=new y(l,f),F=_($,m,p).getImageData(v,v,l,f).data;for(let t=0;C.length>t;t++)C[t]=u(F[t<<2]/255)**d;return C}static combine(t){const n=t[0].length,i=t.length,r=new y(n,i);for(let e=0;i>e;e++)r.set(t[e],e*n);return r}normalize(t,n){for(let i=this.length;i--;)this[i]=(this[i]-t)/(n-t)}compare(t){let n=0;for(let i=this.length;i--;)n+=l(this[i]-t[i]);return n}}class ${constructor(){this.charSet=o,this.fontFamily="monospace",this.fontBase=.25,this.fontWidth=40,this.fontHeight=70,this.fontBlur=9,this.fontGamma=1,this.lutWidth=5,this.lutHeight=7,this.lutPadding=1,this.lutMin=0,this.lutMax=1,this.lutGamma=1,this.brightness=1,this.gamma=1,this.noise=0}}class b{constructor(n){this.settings=new $,t(this.settings,n),this.t=this.i(),this.s=this.o()}i(){const{charSet:t,fontFamily:i}=this.settings,r=[...t].filter((t=>{const i=n()({font:`1em ${t}`}),r=i.measureText(" ");return t=>i.measureText(t).width===r.width})(i)).map(e);return Int32Array.from(r)}o(){const{t,settings:n}=this,{lutMin:i,lutMax:r}=n,e=Array.from(t,t=>y.fromCharCode(t,n)),s=e.reduce((t,n)=>d(t,...n),0);for(const t of e)t.normalize(i*s,r*s);return e}render(t,n,i){return[...this.lines(t,v(n),v(i))].join("\n")}}class C extends b{*lines(t,i,e){const{settings:s,t:o,s:a}=this,{lutWidth:h,lutHeight:c,brightness:l,gamma:f,noise:v}=s,d=h*i,g=c*e,p=(t=>{if(t instanceof CanvasRenderingContext2D)return t;const{width:i,height:r}=t,e=n({width:i,height:r})();return e.drawImage(t,0,0),e})(w(t,d,g)).getImageData(0,0,d,g).data,x=new y(h,c);for(let t=0;g>t;t+=c){const n=[];for(let i=0;d>i;i+=h){let r=0,e=1/0;for(let n=0;c>n;n++)for(let e=0;h>e;e++){let s=i+e+(t+n)*d<<2;const o=l*(.2126*u(p[s++]/255)+.7152*u(p[s++]/255)+.0722*u(p[s++]/255))**f,a=v*(m()-.5);x[r++]=o+a}for(let t=a.length;t--;){const n=a[t].compare(x);e>n&&(e=n,r=t)}n.push(o[r])}yield r(...n)}}}const F=(t,n,i)=>{const r=`#version 300 es\n${i}`,e=t.createShader(n);if(t.shaderSource(e,r),t.compileShader(e),!t.getShaderParameter(e,35713))throw Error(`Shader error:\n${t.getShaderInfoLog(e)}\n${R(r)}\n`);return e},M=(t,n,i)=>{const r=t.createProgram();if(t.attachShader(r,n),t.attachShader(r,i),t.linkProgram(r),!t.getProgramParameter(r,35714))throw Error(`Program error: ${t.getProgramInfoLog(r)}`);return r},P=(t,n=3553)=>{const i=t.createTexture();return U(t,i,i=>t.bindTexture(n,i))},S=(t,n)=>i=>t.getUniformLocation(n,i),R=(t,n=1)=>t.replace(/^/gm,()=>`${n++}: `.padStart(5,"0")),U=(t,n,i)=>r=>(r&&(i(n),r(t,n),i(null)),n),A="in vec2 aPosition;\nout vec2 vPosition;\nvoid main() {\nvPosition = 0.5 + 0.5*aPosition;\ngl_Position = vec4(aPosition, 0., 1.);\n}\n",G="#define MAP3(f, v) vec3(f(v.x), f(v.y), f(v.z))\n#define RGB(x) mix(x/12.92, pow((x+.055)/1.055, 2.4), step(.04045, x))\n#define LUM(x) dot(x, vec3(.2126, .7152, .0722))\nprecision mediump float;\nuniform sampler2D uSrc;\nuniform float uBrightness;\nuniform float uGamma;\nuniform float uNoise;\nuniform float uRandom;\nin vec2 vPosition;\nout vec4 vFragColor;\nfloat hash13(vec3 p3) {\np3 = fract(p3 * 0.1031);\np3 += dot(p3, p3.yzx + 19.19);\nreturn fract((p3.x + p3.y) * p3.z);\n}\nvoid main() {\nvec3 srgb = texture(uSrc, vPosition).rgb;\nfloat signal = uBrightness * pow(LUM(MAP3(RGB, srgb)), uGamma);\nfloat noise = uNoise * (hash13(vec3(gl_FragCoord.xy, 1000.*uRandom)) - 0.5);\nvFragColor = vec4(vec3(clamp(signal + noise, 0., 1.)), 0.);\n}\n",L="#define U ${ width }\n#define V ${ height }\n#define X ${ width * height }\n#define Y ${ chars }\nprecision mediump float;\nuniform sampler2D uSrc;\nuniform sampler2D uLUT;\nuniform int uCharMap[Y];\nin vec2 vPosition;\nout vec4 vFragColor;\nstruct Result {\nint index;\nfloat value;\n};\nvoid main() {\nResult res = Result(0, float(X));\nivec2 pos = ivec2(vec2(textureSize(uSrc, 0))*vPosition) - ivec2(U, V)/2;\nfloat src[X];\nfor (int v = 0; v < V; v++)\nfor (int u = 0; u < U; u++)\nsrc[u + v*U] = texelFetch(uSrc, pos + ivec2(u, v), 0).r;\nfor (int y = 0; y < Y; y++) {\nfloat value = 0.;\nfor (int x = 0; x < X; x++)\nvalue += abs(src[x] - texelFetch(uLUT, ivec2(x, y), 0).r);\nif (res.value > value)\nres = Result(y, value);\n}\nvFragColor = vec4(uCharMap[res.index], 0, 0, 0);\n}\n",B=t=>{t.texParameteri(3553,10241,9728),t.texParameteri(3553,10240,9728)};class z extends b{constructor(t){super(t),this.h=((t,...n)=>{const r=i("canvas")().getContext("webgl2",t);if(!r)throw Error("WebGL2 is not available");for(const t of n)if(!r.getExtension(t))throw Error(`"${t}" extension is not available`);return r})({},"EXT_color_buffer_float"),this.u=((t,n=36160)=>{const i=t.createFramebuffer();return U(t,i,i=>t.bindFramebuffer(n,i))})(this.h)(),this.l=P(this.h)(B),this.v=P(this.h)(B),this.m=P(this.h)(B),this.g=y.combine(this.s),this.p=new Float32Array;const n=F(this.h,35633,A),r=F(this.h,35632,G),e=F(this.h,35632,((t,n={},i="$")=>Function(`{${Object.keys(n)}}`,i,`return \`${t}\``)(n,n))(L,{chars:this.t.length,width:this.settings.lutWidth,height:this.settings.lutHeight}));var s;this._=M(this.h,n,r),this.$=M(this.h,n,e),((t,n=34962)=>{const i=t.createBuffer();return U(t,i,i=>t.bindBuffer(n,i))})(this.h)((s=0,t=>{const n=Float32Array.of(1,1,-1,1,1,-1,-1,-1);t.bufferData(34962,n,35044),t.vertexAttribPointer(s,2,5126,!1,0,0),t.enableVertexAttribArray(s)}))}*lines(t,n,i){const{settings:e,t:s,g:o,h:a,_:h,$:c,u,l,v:f,m:v}=this,d=e.lutWidth*n,g=e.lutHeight*i,x=p(w(t,d,g)),_=S(a,h),y=S(a,c);this.p.length!==n*i<<2&&(this.p=new Float32Array(n*i<<2)),a.bindFramebuffer(36160,u),a.activeTexture(33986),a.bindTexture(3553,l),a.texImage2D(3553,0,33326,o.width,o.height,0,6403,5126,o),a.activeTexture(33985),a.bindTexture(3553,f),a.texImage2D(3553,0,6408,6408,5121,x),a.activeTexture(33984),a.bindTexture(3553,v),a.texImage2D(3553,0,33326,d,g,0,6403,5126,null),a.framebufferTexture2D(36160,36064,3553,v,0),a.useProgram(h),a.uniform1i(_("uSrc"),1),a.uniform1f(_("uBrightness"),e.brightness),a.uniform1f(_("uGamma"),e.gamma),a.uniform1f(_("uNoise"),e.noise),a.uniform1f(_("uRandom"),m()),a.viewport(0,0,d,g),a.drawArrays(5,0,4),a.activeTexture(33985),a.bindTexture(3553,v),a.activeTexture(33984),a.bindTexture(3553,f),a.texImage2D(3553,0,34836,d,g,0,6408,5126,null),a.framebufferTexture2D(36160,36064,3553,f,0),a.useProgram(c),a.uniform1i(y("uSrc"),1),a.uniform1i(y("uLUT"),2),a.uniform1iv(y("uCharMap"),s),a.viewport(0,0,n,i),a.drawArrays(5,0,4),a.readPixels(0,0,n,i,6408,5126,this.p),a.bindFramebuffer(36160,null);for(let t=0;i>t;t++){const i=[];for(let r=0;n>r;r++)i.push(this.p[r+t*n<<2]);yield r(...i)}}}export{C as CPURenderer,z as GPURenderer,y as LUT,b as Renderer,$ as Settings,c as charSets};
//# sourceMappingURL=bundle.esm.min.js.map
