{"version":3,"file":"bundle.umd.min.js","sources":["../node_modules/wheels/esm/object/index.js","../node_modules/wheels/esm/dom/index.js","../src/utils.ts","../src/charsets.ts","../node_modules/wheels/esm/color/srgb.js","../node_modules/wheels/esm/math/native.js","../src/canvas.ts","../src/classes/LUT.ts","../src/classes/Settings.ts","../src/classes/Renderer.ts","../src/gl/enums/webgl1.ts","../src/gl/enums/webgl2.ts","../src/gl/utils.ts","../src/shaders.ts","../src/classes/GPURenderer.ts","../src/classes/CPURenderer.ts"],"sourcesContent":["export const extend = Object.assign;\nexport const overwrite = extend;\nexport const copy = (object) => overwrite({}, object);\nexport const get = (object, path, sep = '.') => path.split(sep).reduce((o, next) => o && o[next], object);\nexport const proto = (object) => {\n    const props = new Set();\n    for (let o = object; o && o !== Object.prototype; o = Object.getPrototypeOf(o))\n        Object.getOwnPropertyNames(o).forEach(prop => props.add(prop));\n    return props;\n};\nexport * from './deep-copy';\n","import { overwrite } from '../object';\nexport const context2d = (...attributes) => (...settings) => overwrite(element('canvas')(...attributes).getContext('2d'), ...settings);\nexport const element = (name) => (...attributes) => overwrite(document.createElement(name), ...attributes);\nexport const append = (parent) => (...children) => children.forEach(child => parent.appendChild(child));\nexport const prevent = (fn) => (event) => { event.preventDefault(); fn && fn(event); };\nexport const raf = () => new Promise(resolve => requestAnimationFrame(resolve));\n","/* eslint-disable @typescript-eslint/unbound-method */\nimport { context2d } from 'wheels/esm/dom'\n\nexport const str = String.fromCharCode\nexport const chr = (str: string) => str.charCodeAt(0)\n\nexport const render = (str: string, ctx = {}, ref = '$'): string =>\n  new Function(`{${Object.keys(ctx)}}`, ref, `return \\`${str}\\``)(ctx, ctx)\n\n// chars.filter(monospaced(font))\nexport const monospaced = (font: string) => {\n  const api = context2d()({ font: `1em ${font}` })\n  const ref = api.measureText(' ')\n  return (char: string) => api.measureText(char).width === ref.width\n}\n","/* eslint-disable prefer-template */\nimport { chr, str } from './utils'\n\nconst expand = (pair: string) => {\n  const [a, b] = [...pair].map(chr)\n  const codes = [...Array(b - a).keys()].map(n => a + n)\n  return str(...codes, b)\n}\n\nexport const ascii =\n  expand(' ^') + expand('`~')\n\nexport const extended =\n  ascii + expand('¡§') + '®°±©«¬´µ·»¿×÷'\n\nexport const extra =\n  extended + expand('‘•') + '‹›∙√∞'\n","export const rgb = (srgb) => srgb <= 0.04045 ? srgb / 12.92 : ((srgb + 0.055) / 1.055) ** 2.4;\nexport const srgb = (rgb) => rgb <= 0.0031308 ? rgb * 12.92 : (rgb ** (1 / 2.4)) * 1.055 - 0.055;\n","export const { abs, acos, acosh, asin, asinh, atan, atan2, atanh, cbrt, ceil, clz32, cos, cosh, exp, expm1, floor, fround, hypot, imul, log, log10, log1p, log2, max, min, pow, random, round, sign, sin, sinh, sqrt, tan, tanh, trunc, E, LN10, LN2, LOG10E, LOG2E, PI, SQRT1_2, SQRT2 } = Math;\nexport const { isFinite, isInteger, isNaN, isSafeInteger, parseFloat, parseInt, EPSILON, MAX_SAFE_INTEGER, MAX_VALUE, MIN_SAFE_INTEGER, MIN_VALUE, NEGATIVE_INFINITY, POSITIVE_INFINITY } = Number;\n","import { context2d } from 'wheels/esm/dom'\nimport { clz32, max } from 'wheels/esm/math'\nimport { Source } from './types'\n\n// most significant bit (but msb(x) is always >=1)\nconst msb = (n: number) => 1 << max(0, 31 - clz32(n))\n\nexport const extract = (src: Source) =>\n  src instanceof CanvasRenderingContext2D\n    ? src.canvas\n    : src\n\nexport const resize = (src: Source, w: number, h: number) => {\n  const srcʹ = extract(src)\n  let wʹ = w * msb(srcʹ.width  / w - 1)\n  let hʹ = h * msb(srcʹ.height / h - 1)\n\n  const tmp = context2d({ width: wʹ, height: hʹ })()\n  tmp.drawImage(srcʹ, 0, 0, wʹ, hʹ)\n\n  if (w === wʹ && h === hʹ)\n    return tmp\n\n  for (let x, y; x = w < wʹ, y = h < hʹ, x || y;)\n    tmp.drawImage(tmp.canvas, 0, 0, wʹ, hʹ, 0, 0, wʹ >>= +x, hʹ >>= +y)\n\n  const dst = context2d({ width: w, height: h })()\n  dst.drawImage(tmp.canvas, 0, 0)\n  return dst\n}\n","import { rgb } from 'wheels/esm/color/srgb'\nimport { context2d } from 'wheels/esm/dom'\nimport { abs, round } from 'wheels/esm/math'\nimport { resize } from '../canvas'\nimport { str } from '../utils'\nimport { Settings } from './Settings'\n\nconst enum Color {\n  outline    = '#00f',\n  background = '#000',\n  foreground = '#fff'\n}\n\nexport class LUT extends Float32Array {\n  constructor(public width: number, public height: number) {\n    super(width * height)\n  }\n\n  static fromCharCode(charCode: number, settings: Settings) {\n    const { fontWidth, fontHeight, fontFamily, fontBlur, fontGamma } = settings\n    const { fontBase, lutWidth, lutHeight, lutPadding, lutGamma } = settings\n\n    const lutWidthʹ   = lutPadding*2 + lutWidth\n    const lutHeightʹ  = lutPadding*2 + lutHeight\n\n    const fontWidthʹ  = round(lutWidthʹ  / lutWidth  * fontWidth)\n    const fontHeightʹ = round(lutHeightʹ / lutHeight * fontHeight)\n\n    const api = context2d({ width: fontWidthʹ, height: fontHeightʹ })()\n    const char = str(charCode)\n\n    api.fillStyle = Color.outline\n    api.fillRect(0, 0, fontWidthʹ, fontHeightʹ)\n\n    api.translate(fontWidthʹ/2, fontHeightʹ/2)\n    api.fillStyle = Color.background\n    api.fillRect(-fontWidth/2, -fontHeight/2, fontWidth, fontHeight)\n\n    api.translate(0, fontHeight*(0.5 - fontBase))\n    api.fillStyle = Color.foreground\n    api.textAlign = 'center'\n    api.font = `${fontHeight}px ${fontFamily}`\n\n    for (let i = 0, m = 1, n = 1; i < fontBlur; [m, n] = [n, n + m]) {\n      api.filter = `blur(${n}px)`\n      api.globalAlpha = (++i / fontBlur)**fontGamma\n      api.fillText(char, 0, 0)\n    }\n\n    const lut = new LUT(lutWidth, lutHeight)\n    const rgba = resize(api, lutWidthʹ, lutHeightʹ)\n      .getImageData(lutPadding, lutPadding, lutWidth, lutHeight)\n      .data\n\n    for (let i = 0; i < lut.length; i++)\n      lut[i] = rgb(rgba[i << 2] / 0xff)**lutGamma\n\n    return lut\n  }\n\n  static combine(luts: LUT[]) {\n    const width = luts[0].length\n    const height = luts.length\n    const lut = new LUT(width, height)\n\n    for (let i = 0; i < height; i++)\n      lut.set(luts[i], i*width)\n\n    return lut\n  }\n\n  normalize(min: number, max: number) {\n    for (let i = 0; i < this.length; i++)\n      this[i] = (this[i] - min) / (max - min)\n  }\n\n  compare(other: ArrayLike<number>) {\n    let acc = 0\n\n    for (let i = this.length; i--;)\n      acc += abs(this[i] - other[i])\n\n    return acc\n  }\n}\n","import { ascii } from '../charsets'\n\nexport class Settings {\n  charSet    = ascii\n\n  fontFamily = 'monospace'\n  fontBase   = 0.25\n  fontWidth  = 40\n  fontHeight = 70\n  fontBlur   = 9\n  fontGamma  = 1.0\n\n  lutWidth   = 5\n  lutHeight  = 7\n  lutPadding = 1\n  lutMin     = 0.0\n  lutMax     = 1.0\n  lutGamma   = 1.0\n\n  brightness = 1.0\n  gamma      = 1.0\n  noise      = 0.0\n}\n","import { floor, max } from 'wheels/esm/math'\nimport { overwrite } from 'wheels/esm/object'\nimport { Source } from '../types'\nimport { chr, monospaced } from '../utils'\nimport { LUT } from './LUT'\nimport { Settings } from './Settings'\n\nexport abstract class Renderer {\n  protected readonly _charMap: Int32Array\n  protected readonly _luts: LUT[]\n\n  readonly settings = new Settings()\n\n  constructor(settings?: Partial<Settings>) {\n    overwrite(this.settings, settings!)\n\n    this._charMap = this._makeCharMap()\n    this._luts = this._makeLUTs()\n  }\n\n  private _makeCharMap() {\n    const { charSet, fontFamily } = this.settings\n\n    const charCodes = [...charSet]\n      .filter(monospaced(fontFamily))\n      .map(chr)\n\n    return Int32Array.from(charCodes)\n  }\n\n  private _makeLUTs() {\n    const { _charMap, settings } = this\n    const { lutMin, lutMax } = settings\n\n    const luts = Array.from(_charMap, cc => LUT.fromCharCode(cc, settings))\n    const maxʹ = luts.reduce((acc, lut) => max(acc, ...lut), 0)\n\n    for (const lut of luts)\n      lut.normalize(lutMin * maxʹ, lutMax * maxʹ)\n\n    return luts\n  }\n\n  render(src: Source, width: number, height: number) {\n    return [...this.lines(src, floor(width), floor(height))].join('\\n')\n  }\n\n  abstract lines(src: Source, width: number, height: number): Generator<string>\n}\n","/* eslint-disable @typescript-eslint/indent, @typescript-eslint/camelcase */\n// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14\nexport const\n\n// ClearBufferMask\nDEPTH_BUFFER_BIT = 0x00000100,\nSTENCIL_BUFFER_BIT = 0x00000400,\nCOLOR_BUFFER_BIT = 0x00004000,\n\n// BeginMode\nPOINTS = 0x0000,\nLINES = 0x0001,\nLINE_LOOP = 0x0002,\nLINE_STRIP = 0x0003,\nTRIANGLES = 0x0004,\nTRIANGLE_STRIP = 0x0005,\nTRIANGLE_FAN = 0x0006,\n\n// AlphaFunction (not supported in ES20)\n// NEVER\n// LESS\n// EQUAL\n// LEQUAL\n// GREATER\n// NOTEQUAL\n// GEQUAL\n// ALWAYS\n\n// BlendingFactorDest\nZERO = 0,\nONE = 1,\nSRC_COLOR = 0x0300,\nONE_MINUS_SRC_COLOR = 0x0301,\nSRC_ALPHA = 0x0302,\nONE_MINUS_SRC_ALPHA = 0x0303,\nDST_ALPHA = 0x0304,\nONE_MINUS_DST_ALPHA = 0x0305,\n\n// BlendingFactorSrc\n// ZERO\n// ONE\nDST_COLOR = 0x0306,\nONE_MINUS_DST_COLOR = 0x0307,\nSRC_ALPHA_SATURATE = 0x0308,\n// SRC_ALPHA\n// ONE_MINUS_SRC_ALPHA\n// DST_ALPHA\n// ONE_MINUS_DST_ALPHA\n\n// BlendEquationSeparate\nFUNC_ADD = 0x8006,\nBLEND_EQUATION = 0x8009,\nBLEND_EQUATION_RGB = 0x8009, // same as BLEND_EQUATION\nBLEND_EQUATION_ALPHA = 0x883D,\n\n// BlendSubtract\nFUNC_SUBTRACT = 0x800A,\nFUNC_REVERSE_SUBTRACT = 0x800B,\n\n// Separate Blend Functions\nBLEND_DST_RGB = 0x80C8,\nBLEND_SRC_RGB = 0x80C9,\nBLEND_DST_ALPHA = 0x80CA,\nBLEND_SRC_ALPHA = 0x80CB,\nCONSTANT_COLOR = 0x8001,\nONE_MINUS_CONSTANT_COLOR = 0x8002,\nCONSTANT_ALPHA = 0x8003,\nONE_MINUS_CONSTANT_ALPHA = 0x8004,\nBLEND_COLOR = 0x8005,\n\n// Buffer Objects\nARRAY_BUFFER = 0x8892,\nELEMENT_ARRAY_BUFFER = 0x8893,\nARRAY_BUFFER_BINDING = 0x8894,\nELEMENT_ARRAY_BUFFER_BINDING = 0x8895,\n\nSTREAM_DRAW = 0x88E0,\nSTATIC_DRAW = 0x88E4,\nDYNAMIC_DRAW = 0x88E8,\n\nBUFFER_SIZE = 0x8764,\nBUFFER_USAGE = 0x8765,\n\nCURRENT_VERTEX_ATTRIB = 0x8626,\n\n// CullFaceMode\nFRONT = 0x0404,\nBACK = 0x0405,\nFRONT_AND_BACK = 0x0408,\n\n// DepthFunction\n// NEVER\n// LESS\n// EQUAL\n// LEQUAL\n// GREATER\n// NOTEQUAL\n// GEQUAL\n// ALWAYS\n\n// EnableCap\n// TEXTURE_2D\nCULL_FACE = 0x0B44,\nBLEND = 0x0BE2,\nDITHER = 0x0BD0,\nSTENCIL_TEST = 0x0B90,\nDEPTH_TEST = 0x0B71,\nSCISSOR_TEST = 0x0C11,\nPOLYGON_OFFSET_FILL = 0x8037,\nSAMPLE_ALPHA_TO_COVERAGE = 0x809E,\nSAMPLE_COVERAGE = 0x80A0,\n\n// ErrorCode\nNO_ERROR = 0,\nINVALID_ENUM = 0x0500,\nINVALID_VALUE = 0x0501,\nINVALID_OPERATION = 0x0502,\nOUT_OF_MEMORY = 0x0505,\n\n// FrontFaceDirection\nCW = 0x0900,\nCCW = 0x0901,\n\n// GetPName\nLINE_WIDTH = 0x0B21,\nALIASED_POINT_SIZE_RANGE = 0x846D,\nALIASED_LINE_WIDTH_RANGE = 0x846E,\nCULL_FACE_MODE = 0x0B45,\nFRONT_FACE = 0x0B46,\nDEPTH_RANGE = 0x0B70,\nDEPTH_WRITEMASK = 0x0B72,\nDEPTH_CLEAR_VALUE = 0x0B73,\nDEPTH_FUNC = 0x0B74,\nSTENCIL_CLEAR_VALUE = 0x0B91,\nSTENCIL_FUNC = 0x0B92,\nSTENCIL_FAIL = 0x0B94,\nSTENCIL_PASS_DEPTH_FAIL = 0x0B95,\nSTENCIL_PASS_DEPTH_PASS = 0x0B96,\nSTENCIL_REF = 0x0B97,\nSTENCIL_VALUE_MASK = 0x0B93,\nSTENCIL_WRITEMASK = 0x0B98,\nSTENCIL_BACK_FUNC = 0x8800,\nSTENCIL_BACK_FAIL = 0x8801,\nSTENCIL_BACK_PASS_DEPTH_FAIL = 0x8802,\nSTENCIL_BACK_PASS_DEPTH_PASS = 0x8803,\nSTENCIL_BACK_REF = 0x8CA3,\nSTENCIL_BACK_VALUE_MASK = 0x8CA4,\nSTENCIL_BACK_WRITEMASK = 0x8CA5,\nVIEWPORT = 0x0BA2,\nSCISSOR_BOX = 0x0C10,\n// SCISSOR_TEST\nCOLOR_CLEAR_VALUE = 0x0C22,\nCOLOR_WRITEMASK = 0x0C23,\nUNPACK_ALIGNMENT = 0x0CF5,\nPACK_ALIGNMENT = 0x0D05,\nMAX_TEXTURE_SIZE = 0x0D33,\nMAX_VIEWPORT_DIMS = 0x0D3A,\nSUBPIXEL_BITS = 0x0D50,\nRED_BITS = 0x0D52,\nGREEN_BITS = 0x0D53,\nBLUE_BITS = 0x0D54,\nALPHA_BITS = 0x0D55,\nDEPTH_BITS = 0x0D56,\nSTENCIL_BITS = 0x0D57,\nPOLYGON_OFFSET_UNITS = 0x2A00,\n// POLYGON_OFFSET_FILL\nPOLYGON_OFFSET_FACTOR = 0x8038,\nTEXTURE_BINDING_2D = 0x8069,\nSAMPLE_BUFFERS = 0x80A8,\nSAMPLES = 0x80A9,\nSAMPLE_COVERAGE_VALUE = 0x80AA,\nSAMPLE_COVERAGE_INVERT = 0x80AB,\n\n// GetTextureParameter\n// TEXTURE_MAG_FILTER\n// TEXTURE_MIN_FILTER\n// TEXTURE_WRAP_S\n// TEXTURE_WRAP_T\n\nCOMPRESSED_TEXTURE_FORMATS = 0x86A3,\n\n// HintMode\nDONT_CARE = 0x1100,\nFASTEST = 0x1101,\nNICEST = 0x1102,\n\n// HintTarget\nGENERATE_MIPMAP_HINT = 0x8192,\n\n// DataType\nBYTE = 0x1400,\nUNSIGNED_BYTE = 0x1401,\nSHORT = 0x1402,\nUNSIGNED_SHORT = 0x1403,\nINT = 0x1404,\nUNSIGNED_INT = 0x1405,\nFLOAT = 0x1406,\n\n// PixelFormat\nDEPTH_COMPONENT = 0x1902,\nALPHA = 0x1906,\nRGB = 0x1907,\nRGBA = 0x1908,\nLUMINANCE = 0x1909,\nLUMINANCE_ALPHA = 0x190A,\n\n// PixelType\n// UNSIGNED_BYTE\nUNSIGNED_SHORT_4_4_4_4 = 0x8033,\nUNSIGNED_SHORT_5_5_5_1 = 0x8034,\nUNSIGNED_SHORT_5_6_5 = 0x8363,\n\n// Shaders\nFRAGMENT_SHADER = 0x8B30,\nVERTEX_SHADER = 0x8B31,\nMAX_VERTEX_ATTRIBS = 0x8869,\nMAX_VERTEX_UNIFORM_VECTORS = 0x8DFB,\nMAX_VARYING_VECTORS = 0x8DFC,\nMAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D,\nMAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C,\nMAX_TEXTURE_IMAGE_UNITS = 0x8872,\nMAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD,\nSHADER_TYPE = 0x8B4F,\nDELETE_STATUS = 0x8B80,\nLINK_STATUS = 0x8B82,\nVALIDATE_STATUS = 0x8B83,\nATTACHED_SHADERS = 0x8B85,\nACTIVE_UNIFORMS = 0x8B86,\nACTIVE_ATTRIBUTES = 0x8B89,\nSHADING_LANGUAGE_VERSION = 0x8B8C,\nCURRENT_PROGRAM = 0x8B8D,\n\n// StencilFunction\nNEVER = 0x0200,\nLESS = 0x0201,\nEQUAL = 0x0202,\nLEQUAL = 0x0203,\nGREATER = 0x0204,\nNOTEQUAL = 0x0205,\nGEQUAL = 0x0206,\nALWAYS = 0x0207,\n\n// StencilOp\n// ZERO\nKEEP = 0x1E00,\nREPLACE = 0x1E01,\nINCR = 0x1E02,\nDECR = 0x1E03,\nINVERT = 0x150A,\nINCR_WRAP = 0x8507,\nDECR_WRAP = 0x8508,\n\n// StringName\nVENDOR = 0x1F00,\nRENDERER = 0x1F01,\nVERSION = 0x1F02,\n\n// TextureMagFilter\nNEAREST = 0x2600,\nLINEAR = 0x2601,\n\n// TextureMinFilter\n// NEAREST\n// LINEAR\nNEAREST_MIPMAP_NEAREST = 0x2700,\nLINEAR_MIPMAP_NEAREST = 0x2701,\nNEAREST_MIPMAP_LINEAR = 0x2702,\nLINEAR_MIPMAP_LINEAR = 0x2703,\n\n// TextureParameterName\nTEXTURE_MAG_FILTER = 0x2800,\nTEXTURE_MIN_FILTER = 0x2801,\nTEXTURE_WRAP_S = 0x2802,\nTEXTURE_WRAP_T = 0x2803,\n\n// TextureTarget\nTEXTURE_2D = 0x0DE1,\nTEXTURE = 0x1702,\n\nTEXTURE_CUBE_MAP = 0x8513,\nTEXTURE_BINDING_CUBE_MAP = 0x8514,\nTEXTURE_CUBE_MAP_POSITIVE_X = 0x8515,\nTEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516,\nTEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517,\nTEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518,\nTEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519,\nTEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A,\nMAX_CUBE_MAP_TEXTURE_SIZE = 0x851C,\n\n// TextureUnit\nTEXTURE0 = 0x84C0,\nTEXTURE1 = 0x84C1,\nTEXTURE2 = 0x84C2,\nTEXTURE3 = 0x84C3,\nTEXTURE4 = 0x84C4,\nTEXTURE5 = 0x84C5,\nTEXTURE6 = 0x84C6,\nTEXTURE7 = 0x84C7,\nTEXTURE8 = 0x84C8,\nTEXTURE9 = 0x84C9,\nTEXTURE10 = 0x84CA,\nTEXTURE11 = 0x84CB,\nTEXTURE12 = 0x84CC,\nTEXTURE13 = 0x84CD,\nTEXTURE14 = 0x84CE,\nTEXTURE15 = 0x84CF,\nTEXTURE16 = 0x84D0,\nTEXTURE17 = 0x84D1,\nTEXTURE18 = 0x84D2,\nTEXTURE19 = 0x84D3,\nTEXTURE20 = 0x84D4,\nTEXTURE21 = 0x84D5,\nTEXTURE22 = 0x84D6,\nTEXTURE23 = 0x84D7,\nTEXTURE24 = 0x84D8,\nTEXTURE25 = 0x84D9,\nTEXTURE26 = 0x84DA,\nTEXTURE27 = 0x84DB,\nTEXTURE28 = 0x84DC,\nTEXTURE29 = 0x84DD,\nTEXTURE30 = 0x84DE,\nTEXTURE31 = 0x84DF,\nACTIVE_TEXTURE = 0x84E0,\n\n// TextureWrapMode\nREPEAT = 0x2901,\nCLAMP_TO_EDGE = 0x812F,\nMIRRORED_REPEAT = 0x8370,\n\n// Uniform Types\nFLOAT_VEC2 = 0x8B50,\nFLOAT_VEC3 = 0x8B51,\nFLOAT_VEC4 = 0x8B52,\nINT_VEC2 = 0x8B53,\nINT_VEC3 = 0x8B54,\nINT_VEC4 = 0x8B55,\nBOOL = 0x8B56,\nBOOL_VEC2 = 0x8B57,\nBOOL_VEC3 = 0x8B58,\nBOOL_VEC4 = 0x8B59,\nFLOAT_MAT2 = 0x8B5A,\nFLOAT_MAT3 = 0x8B5B,\nFLOAT_MAT4 = 0x8B5C,\nSAMPLER_2D = 0x8B5E,\nSAMPLER_CUBE = 0x8B60,\n\n// Vertex Arrays\nVERTEX_ATTRIB_ARRAY_ENABLED = 0x8622,\nVERTEX_ATTRIB_ARRAY_SIZE = 0x8623,\nVERTEX_ATTRIB_ARRAY_STRIDE = 0x8624,\nVERTEX_ATTRIB_ARRAY_TYPE = 0x8625,\nVERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A,\nVERTEX_ATTRIB_ARRAY_POINTER = 0x8645,\nVERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F,\n\n// Read Format\nIMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A,\nIMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B,\n\n// Shader Source\nCOMPILE_STATUS = 0x8B81,\n\n// Shader Precision-Specified Types\nLOW_FLOAT = 0x8DF0,\nMEDIUM_FLOAT = 0x8DF1,\nHIGH_FLOAT = 0x8DF2,\nLOW_INT = 0x8DF3,\nMEDIUM_INT = 0x8DF4,\nHIGH_INT = 0x8DF5,\n\n// Framebuffer Object.\nFRAMEBUFFER = 0x8D40,\nRENDERBUFFER = 0x8D41,\n\nRGBA4 = 0x8056,\nRGB5_A1 = 0x8057,\nRGB565 = 0x8D62,\nDEPTH_COMPONENT16 = 0x81A5,\nSTENCIL_INDEX8 = 0x8D48,\nDEPTH_STENCIL = 0x84F9,\n\nRENDERBUFFER_WIDTH = 0x8D42,\nRENDERBUFFER_HEIGHT = 0x8D43,\nRENDERBUFFER_INTERNAL_FORMAT = 0x8D44,\nRENDERBUFFER_RED_SIZE = 0x8D50,\nRENDERBUFFER_GREEN_SIZE = 0x8D51,\nRENDERBUFFER_BLUE_SIZE = 0x8D52,\nRENDERBUFFER_ALPHA_SIZE = 0x8D53,\nRENDERBUFFER_DEPTH_SIZE = 0x8D54,\nRENDERBUFFER_STENCIL_SIZE = 0x8D55,\n\nFRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0,\nFRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1,\nFRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2,\nFRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3,\n\nCOLOR_ATTACHMENT0 = 0x8CE0,\nDEPTH_ATTACHMENT = 0x8D00,\nSTENCIL_ATTACHMENT = 0x8D20,\nDEPTH_STENCIL_ATTACHMENT = 0x821A,\n\nNONE = 0,\n\nFRAMEBUFFER_COMPLETE = 0x8CD5,\nFRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6,\nFRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7,\nFRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9,\nFRAMEBUFFER_UNSUPPORTED = 0x8CDD,\n\nFRAMEBUFFER_BINDING = 0x8CA6,\nRENDERBUFFER_BINDING = 0x8CA7,\nMAX_RENDERBUFFER_SIZE = 0x84E8,\n\nINVALID_FRAMEBUFFER_OPERATION = 0x0506,\n\n// WebGL-specific enums\nUNPACK_FLIP_Y_WEBGL = 0x9240,\nUNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241,\nCONTEXT_LOST_WEBGL = 0x9242,\nUNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243,\nBROWSER_DEFAULT_WEBGL = 0x9244\n","/* eslint-disable @typescript-eslint/indent, @typescript-eslint/camelcase */\n// https://www.khronos.org/registry/webgl/specs/latest/2.0/#3.7\nexport const\n\nREAD_BUFFER = 0x0C02,\nUNPACK_ROW_LENGTH = 0x0CF2,\nUNPACK_SKIP_ROWS = 0x0CF3,\nUNPACK_SKIP_PIXELS = 0x0CF4,\nPACK_ROW_LENGTH = 0x0D02,\nPACK_SKIP_ROWS = 0x0D03,\nPACK_SKIP_PIXELS = 0x0D04,\nCOLOR = 0x1800,\nDEPTH = 0x1801,\nSTENCIL = 0x1802,\nRED = 0x1903,\nRGB8 = 0x8051,\nRGBA8 = 0x8058,\nRGB10_A2 = 0x8059,\nTEXTURE_BINDING_3D = 0x806A,\nUNPACK_SKIP_IMAGES = 0x806D,\nUNPACK_IMAGE_HEIGHT = 0x806E,\nTEXTURE_3D = 0x806F,\nTEXTURE_WRAP_R = 0x8072,\nMAX_3D_TEXTURE_SIZE = 0x8073,\nUNSIGNED_INT_2_10_10_10_REV = 0x8368,\nMAX_ELEMENTS_VERTICES = 0x80E8,\nMAX_ELEMENTS_INDICES = 0x80E9,\nTEXTURE_MIN_LOD = 0x813A,\nTEXTURE_MAX_LOD = 0x813B,\nTEXTURE_BASE_LEVEL = 0x813C,\nTEXTURE_MAX_LEVEL = 0x813D,\nMIN = 0x8007,\nMAX = 0x8008,\nDEPTH_COMPONENT24 = 0x81A6,\nMAX_TEXTURE_LOD_BIAS = 0x84FD,\nTEXTURE_COMPARE_MODE = 0x884C,\nTEXTURE_COMPARE_FUNC = 0x884D,\nCURRENT_QUERY = 0x8865,\nQUERY_RESULT = 0x8866,\nQUERY_RESULT_AVAILABLE = 0x8867,\nSTREAM_READ = 0x88E1,\nSTREAM_COPY = 0x88E2,\nSTATIC_READ = 0x88E5,\nSTATIC_COPY = 0x88E6,\nDYNAMIC_READ = 0x88E9,\nDYNAMIC_COPY = 0x88EA,\nMAX_DRAW_BUFFERS = 0x8824,\nDRAW_BUFFER0 = 0x8825,\nDRAW_BUFFER1 = 0x8826,\nDRAW_BUFFER2 = 0x8827,\nDRAW_BUFFER3 = 0x8828,\nDRAW_BUFFER4 = 0x8829,\nDRAW_BUFFER5 = 0x882A,\nDRAW_BUFFER6 = 0x882B,\nDRAW_BUFFER7 = 0x882C,\nDRAW_BUFFER8 = 0x882D,\nDRAW_BUFFER9 = 0x882E,\nDRAW_BUFFER10 = 0x882F,\nDRAW_BUFFER11 = 0x8830,\nDRAW_BUFFER12 = 0x8831,\nDRAW_BUFFER13 = 0x8832,\nDRAW_BUFFER14 = 0x8833,\nDRAW_BUFFER15 = 0x8834,\nMAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49,\nMAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A,\nSAMPLER_3D = 0x8B5F,\nSAMPLER_2D_SHADOW = 0x8B62,\nFRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B,\nPIXEL_PACK_BUFFER = 0x88EB,\nPIXEL_UNPACK_BUFFER = 0x88EC,\nPIXEL_PACK_BUFFER_BINDING = 0x88ED,\nPIXEL_UNPACK_BUFFER_BINDING = 0x88EF,\nFLOAT_MAT2x3 = 0x8B65,\nFLOAT_MAT2x4 = 0x8B66,\nFLOAT_MAT3x2 = 0x8B67,\nFLOAT_MAT3x4 = 0x8B68,\nFLOAT_MAT4x2 = 0x8B69,\nFLOAT_MAT4x3 = 0x8B6A,\nSRGB = 0x8C40,\nSRGB8 = 0x8C41,\nSRGB8_ALPHA8 = 0x8C43,\nCOMPARE_REF_TO_TEXTURE = 0x884E,\nRGBA32F = 0x8814,\nRGB32F = 0x8815,\nRGBA16F = 0x881A,\nRGB16F = 0x881B,\nVERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD,\nMAX_ARRAY_TEXTURE_LAYERS = 0x88FF,\nMIN_PROGRAM_TEXEL_OFFSET = 0x8904,\nMAX_PROGRAM_TEXEL_OFFSET = 0x8905,\nMAX_VARYING_COMPONENTS = 0x8B4B,\nTEXTURE_2D_ARRAY = 0x8C1A,\nTEXTURE_BINDING_2D_ARRAY = 0x8C1D,\nR11F_G11F_B10F = 0x8C3A,\nUNSIGNED_INT_10F_11F_11F_REV = 0x8C3B,\nRGB9_E5 = 0x8C3D,\nUNSIGNED_INT_5_9_9_9_REV = 0x8C3E,\nTRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F,\nMAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80,\nTRANSFORM_FEEDBACK_VARYINGS = 0x8C83,\nTRANSFORM_FEEDBACK_BUFFER_START = 0x8C84,\nTRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85,\nTRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88,\nRASTERIZER_DISCARD = 0x8C89,\nMAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A,\nMAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B,\nINTERLEAVED_ATTRIBS = 0x8C8C,\nSEPARATE_ATTRIBS = 0x8C8D,\nTRANSFORM_FEEDBACK_BUFFER = 0x8C8E,\nTRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F,\nRGBA32UI = 0x8D70,\nRGB32UI = 0x8D71,\nRGBA16UI = 0x8D76,\nRGB16UI = 0x8D77,\nRGBA8UI = 0x8D7C,\nRGB8UI = 0x8D7D,\nRGBA32I = 0x8D82,\nRGB32I = 0x8D83,\nRGBA16I = 0x8D88,\nRGB16I = 0x8D89,\nRGBA8I = 0x8D8E,\nRGB8I = 0x8D8F,\nRED_INTEGER = 0x8D94,\nRGB_INTEGER = 0x8D98,\nRGBA_INTEGER = 0x8D99,\nSAMPLER_2D_ARRAY = 0x8DC1,\nSAMPLER_2D_ARRAY_SHADOW = 0x8DC4,\nSAMPLER_CUBE_SHADOW = 0x8DC5,\nUNSIGNED_INT_VEC2 = 0x8DC6,\nUNSIGNED_INT_VEC3 = 0x8DC7,\nUNSIGNED_INT_VEC4 = 0x8DC8,\nINT_SAMPLER_2D = 0x8DCA,\nINT_SAMPLER_3D = 0x8DCB,\nINT_SAMPLER_CUBE = 0x8DCC,\nINT_SAMPLER_2D_ARRAY = 0x8DCF,\nUNSIGNED_INT_SAMPLER_2D = 0x8DD2,\nUNSIGNED_INT_SAMPLER_3D = 0x8DD3,\nUNSIGNED_INT_SAMPLER_CUBE = 0x8DD4,\nUNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7,\nDEPTH_COMPONENT32F = 0x8CAC,\nDEPTH32F_STENCIL8 = 0x8CAD,\nFLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD,\nFRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210,\nFRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211,\nFRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212,\nFRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213,\nFRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214,\nFRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215,\nFRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216,\nFRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217,\nFRAMEBUFFER_DEFAULT = 0x8218,\n// DEPTH_STENCIL_ATTACHMENT = 0x821A, // duplicate\n// DEPTH_STENCIL = 0x84F9, // duplicate\nUNSIGNED_INT_24_8 = 0x84FA,\nDEPTH24_STENCIL8 = 0x88F0,\nUNSIGNED_NORMALIZED = 0x8C17,\nDRAW_FRAMEBUFFER_BINDING = 0x8CA6, // Same as FRAMEBUFFER_BINDING\nREAD_FRAMEBUFFER = 0x8CA8,\nDRAW_FRAMEBUFFER = 0x8CA9,\nREAD_FRAMEBUFFER_BINDING = 0x8CAA,\nRENDERBUFFER_SAMPLES = 0x8CAB,\nFRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4,\nMAX_COLOR_ATTACHMENTS = 0x8CDF,\nCOLOR_ATTACHMENT1 = 0x8CE1,\nCOLOR_ATTACHMENT2 = 0x8CE2,\nCOLOR_ATTACHMENT3 = 0x8CE3,\nCOLOR_ATTACHMENT4 = 0x8CE4,\nCOLOR_ATTACHMENT5 = 0x8CE5,\nCOLOR_ATTACHMENT6 = 0x8CE6,\nCOLOR_ATTACHMENT7 = 0x8CE7,\nCOLOR_ATTACHMENT8 = 0x8CE8,\nCOLOR_ATTACHMENT9 = 0x8CE9,\nCOLOR_ATTACHMENT10 = 0x8CEA,\nCOLOR_ATTACHMENT11 = 0x8CEB,\nCOLOR_ATTACHMENT12 = 0x8CEC,\nCOLOR_ATTACHMENT13 = 0x8CED,\nCOLOR_ATTACHMENT14 = 0x8CEE,\nCOLOR_ATTACHMENT15 = 0x8CEF,\nFRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56,\nMAX_SAMPLES = 0x8D57,\nHALF_FLOAT = 0x140B,\nRG = 0x8227,\nRG_INTEGER = 0x8228,\nR8 = 0x8229,\nRG8 = 0x822B,\nR16F = 0x822D,\nR32F = 0x822E,\nRG16F = 0x822F,\nRG32F = 0x8230,\nR8I = 0x8231,\nR8UI = 0x8232,\nR16I = 0x8233,\nR16UI = 0x8234,\nR32I = 0x8235,\nR32UI = 0x8236,\nRG8I = 0x8237,\nRG8UI = 0x8238,\nRG16I = 0x8239,\nRG16UI = 0x823A,\nRG32I = 0x823B,\nRG32UI = 0x823C,\nVERTEX_ARRAY_BINDING = 0x85B5,\nR8_SNORM = 0x8F94,\nRG8_SNORM = 0x8F95,\nRGB8_SNORM = 0x8F96,\nRGBA8_SNORM = 0x8F97,\nSIGNED_NORMALIZED = 0x8F9C,\nCOPY_READ_BUFFER = 0x8F36,\nCOPY_WRITE_BUFFER = 0x8F37,\nCOPY_READ_BUFFER_BINDING = 0x8F36, // Same as COPY_READ_BUFFER\nCOPY_WRITE_BUFFER_BINDING = 0x8F37, // Same as COPY_WRITE_BUFFER\nUNIFORM_BUFFER = 0x8A11,\nUNIFORM_BUFFER_BINDING = 0x8A28,\nUNIFORM_BUFFER_START = 0x8A29,\nUNIFORM_BUFFER_SIZE = 0x8A2A,\nMAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B,\nMAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D,\nMAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E,\nMAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F,\nMAX_UNIFORM_BLOCK_SIZE = 0x8A30,\nMAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31,\nMAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33,\nUNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34,\nACTIVE_UNIFORM_BLOCKS = 0x8A36,\nUNIFORM_TYPE = 0x8A37,\nUNIFORM_SIZE = 0x8A38,\nUNIFORM_BLOCK_INDEX = 0x8A3A,\nUNIFORM_OFFSET = 0x8A3B,\nUNIFORM_ARRAY_STRIDE = 0x8A3C,\nUNIFORM_MATRIX_STRIDE = 0x8A3D,\nUNIFORM_IS_ROW_MAJOR = 0x8A3E,\nUNIFORM_BLOCK_BINDING = 0x8A3F,\nUNIFORM_BLOCK_DATA_SIZE = 0x8A40,\nUNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42,\nUNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43,\nUNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44,\nUNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46,\nINVALID_INDEX = 0xFFFFFFFF,\nMAX_VERTEX_OUTPUT_COMPONENTS = 0x9122,\nMAX_FRAGMENT_INPUT_COMPONENTS = 0x9125,\nMAX_SERVER_WAIT_TIMEOUT = 0x9111,\nOBJECT_TYPE = 0x9112,\nSYNC_CONDITION = 0x9113,\nSYNC_STATUS = 0x9114,\nSYNC_FLAGS = 0x9115,\nSYNC_FENCE = 0x9116,\nSYNC_GPU_COMMANDS_COMPLETE = 0x9117,\nUNSIGNALED = 0x9118,\nSIGNALED = 0x9119,\nALREADY_SIGNALED = 0x911A,\nTIMEOUT_EXPIRED = 0x911B,\nCONDITION_SATISFIED = 0x911C,\nWAIT_FAILED = 0x911D,\nSYNC_FLUSH_COMMANDS_BIT = 0x00000001,\nVERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE,\nANY_SAMPLES_PASSED = 0x8C2F,\nANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A,\nSAMPLER_BINDING = 0x8919,\nRGB10_A2UI = 0x906F,\nINT_2_10_10_10_REV = 0x8D9F,\nTRANSFORM_FEEDBACK = 0x8E22,\nTRANSFORM_FEEDBACK_PAUSED = 0x8E23,\nTRANSFORM_FEEDBACK_ACTIVE = 0x8E24,\nTRANSFORM_FEEDBACK_BINDING = 0x8E25,\nTEXTURE_IMMUTABLE_FORMAT = 0x912F,\nMAX_ELEMENT_INDEX = 0x8D6B,\nTEXTURE_IMMUTABLE_LEVELS = 0x82DF,\n\n// WebGL-specific enums\nMAX_CLIENT_WAIT_TIMEOUT_WEBGL = 0x9247\n","import * as gle from './enums'\nimport { element } from 'wheels/esm/dom'\n\nexport type Callback<T = WebGLObject> = (gl: WebGL2RenderingContext, object: T) => void\nexport type Binder<T = WebGLObject> = (object: T | null) => void\nexport type Context<T = WebGLObject> = (fn?: Callback<T>) => T\nexport type Factory<T = WebGLObject> = (gl: WebGL2RenderingContext, target?: GLenum) => Context<T>\n\nexport const api = (attributes?: WebGLContextAttributes, ...extensions: string[]) => {\n  const canvas = element('canvas')()\n  const gl = canvas.getContext('webgl2', attributes)\n\n  if (!gl)\n    throw new Error('WebGL2 is not available')\n\n  for (const ext of extensions) {\n    if (!gl.getExtension(ext))\n      throw new Error(`\"${ext}\" extension is not available`)\n  }\n\n  return gl\n}\n\nexport const shader = (gl: WebGL2RenderingContext, type: GLenum, source: string) => {\n  const sourceʹ = `#version 300 es\\n${source}`\n  const shader = gl.createShader(type)!\n\n  gl.shaderSource(shader, sourceʹ)\n  gl.compileShader(shader)\n\n  if (!gl.getShaderParameter(shader, gle.COMPILE_STATUS))\n    throw new Error(`Shader error:\\n${gl.getShaderInfoLog(shader)}\\n${lineNumbers(sourceʹ)}\\n`)\n\n  return shader\n}\n\nexport const program = (gl: WebGL2RenderingContext, vert: WebGLShader, frag: WebGLShader) => {\n  const program = gl.createProgram()!\n\n  gl.attachShader(program, vert)\n  gl.attachShader(program, frag)\n  gl.linkProgram(program)\n\n  if (!gl.getProgramParameter(program, gle.LINK_STATUS))\n    throw new Error(`Program error: ${gl.getProgramInfoLog(program)}`)\n\n  return program\n}\n\nexport const array: Factory<WebGLVertexArrayObject> = gl => {\n  const object = gl.createVertexArray()!\n  return context(gl, object, object => gl.bindVertexArray(object))\n}\n\nexport const buffer: Factory<WebGLBuffer> = (gl, target = gle.ARRAY_BUFFER) => {\n  const object = gl.createBuffer()!\n  return context(gl, object, object => gl.bindBuffer(target, object))\n}\n\nexport const texture: Factory<WebGLTexture> = (gl, target = gle.TEXTURE_2D) => {\n  const object = gl.createTexture()!\n  return context(gl, object, object => gl.bindTexture(target, object))\n}\n\nexport const framebuffer: Factory<WebGLFramebuffer> = (gl, target = gle.FRAMEBUFFER) => {\n  const object = gl.createFramebuffer()!\n  return context(gl, object, object => gl.bindFramebuffer(target, object))\n}\n\nexport const uniforms = (gl: WebGL2RenderingContext, program: WebGLProgram) =>\n  (name: string) => gl.getUniformLocation(program, name)\n\n//\n\nconst lineNumbers = (source: string, n = 1) =>\n  source.replace(/^/gm, () => `${n++}: `.padStart(5, '0'))\n\nconst context = <T>(gl: WebGL2RenderingContext, object: T, bind: Binder<T>): Context<T> =>\n  fn => (fn && (bind(object), fn(gl, object), bind(null)), object)\n","import base from '../glsl/base.vert'\nimport pass1 from '../glsl/pass1.frag'\nimport pass2 from '../glsl/pass2.frag'\n\nexport const vert = { base }\nexport const frag = { pass1, pass2 }\n","import { resize } from '../canvas'\nimport * as gle from '../gl/enums'\nimport * as glu from '../gl/utils'\nimport { frag, vert } from '../shaders'\nimport { Source } from '../types'\nimport { render, str } from '../utils'\nimport { LUT } from './LUT'\nimport { Renderer } from './Renderer'\nimport { Settings } from './Settings'\n\nconst enum Attribute { position }\nconst enum Texture { dst, src, lut }\n\nconst filterNearest: glu.Callback = gl => {\n  gl.texParameteri(gle.TEXTURE_2D, gle.TEXTURE_MIN_FILTER, gle.NEAREST)\n  gl.texParameteri(gle.TEXTURE_2D, gle.TEXTURE_MAG_FILTER, gle.NEAREST)\n}\n\nconst quadGeometry = (index: number): glu.Callback => gl => {\n  const quad = Float32Array.of(1, 1, -1, 1, 1, -1, -1, -1)\n  gl.bufferData(gle.ARRAY_BUFFER, quad, gle.STATIC_DRAW)\n  gl.vertexAttribPointer(index, 2, gle.FLOAT, false, 0, 0)\n  gl.enableVertexAttribArray(index)\n}\n\nexport class GPURenderer extends Renderer {\n  private readonly _pass1: WebGLProgram\n  private readonly _pass2: WebGLProgram\n\n  private readonly _gl     = glu.api({}, 'EXT_color_buffer_float')\n  private readonly _fbo    = glu.framebuffer(this._gl)()\n  private readonly _txLUT  = glu.texture(this._gl)(filterNearest)\n  private readonly _txOdd  = glu.texture(this._gl)(filterNearest)\n  private readonly _txEven = glu.texture(this._gl)(filterNearest)\n\n  private readonly _lut = LUT.combine(this._luts)\n  private _charCodes = new Float32Array()\n\n  constructor(settings?: Partial<Settings>) {\n    super(settings)\n\n    const vBase = glu.shader(this._gl, gle.VERTEX_SHADER, vert.base)\n    const fPass1 = glu.shader(this._gl, gle.FRAGMENT_SHADER, frag.pass1)\n    const fPass2 = glu.shader(this._gl, gle.FRAGMENT_SHADER, render(frag.pass2, {\n      chars: this._charMap.length,\n      width: this.settings.lutWidth,\n      height: this.settings.lutHeight\n    }))\n\n    this._pass1 = glu.program(this._gl, vBase, fPass1)\n    this._pass2 = glu.program(this._gl, vBase, fPass2)\n\n    glu.buffer(this._gl)(quadGeometry(Attribute.position))\n  }\n\n  *lines(src: Source, width: number, height: number) {\n    const { settings, _charMap, _lut, _gl, _pass1, _pass2, _fbo, _txLUT, _txOdd, _txEven } = this\n\n    const srcWidth  = settings.lutWidth  * width\n    const srcHeight = settings.lutHeight * height\n    const srcʹ = resize(src, srcWidth, srcHeight)\n\n    const uPass1 = glu.uniforms(_gl, _pass1)\n    const uPass2 = glu.uniforms(_gl, _pass2)\n\n    if (this._charCodes.length !== width * height)\n      this._charCodes = new Float32Array(width * height)\n\n    // enable framebuffer\n    _gl.bindFramebuffer(gle.FRAMEBUFFER, _fbo)\n\n    // 1st pass\n    _gl.activeTexture(gle.TEXTURE0 + Texture.lut)\n    _gl.bindTexture(gle.TEXTURE_2D, _txLUT)\n    _gl.texImage2D(gle.TEXTURE_2D, 0, gle.R32F, _lut.width, _lut.height, 0, gle.RED, gle.FLOAT, _lut)\n\n    _gl.activeTexture(gle.TEXTURE0 + Texture.src)\n    _gl.bindTexture(gle.TEXTURE_2D, _txOdd)\n    _gl.texImage2D(gle.TEXTURE_2D, 0, gle.RGBA, gle.RGBA, gle.UNSIGNED_BYTE, srcʹ.canvas)\n\n    _gl.activeTexture(gle.TEXTURE0 + Texture.dst)\n    _gl.bindTexture(gle.TEXTURE_2D, _txEven)\n    _gl.texImage2D(gle.TEXTURE_2D, 0, gle.R32F, srcWidth, srcHeight, 0, gle.RED, gle.FLOAT, null)\n    _gl.framebufferTexture2D(gle.FRAMEBUFFER, gle.COLOR_ATTACHMENT0, gle.TEXTURE_2D, _txEven, 0)\n\n    _gl.useProgram(_pass1)\n    _gl.uniform1i(uPass1('uSrc'), Texture.src)\n    _gl.uniform1f(uPass1('uBrightness'), settings.brightness)\n    _gl.uniform1f(uPass1('uGamma'), settings.gamma)\n    _gl.uniform1f(uPass1('uNoise'), settings.noise)\n    _gl.uniform1f(uPass1('uRandom'), Math.random())\n    _gl.viewport(0, 0, srcWidth, srcHeight)\n    _gl.drawArrays(gle.TRIANGLE_STRIP, 0, 4)\n\n    // 2nd pass\n    _gl.activeTexture(gle.TEXTURE0 + Texture.src)\n    _gl.bindTexture(gle.TEXTURE_2D, _txEven)\n\n    _gl.activeTexture(gle.TEXTURE0 + Texture.dst)\n    _gl.bindTexture(gle.TEXTURE_2D, _txOdd)\n    _gl.texImage2D(gle.TEXTURE_2D, 0, gle.R32F, srcWidth, srcHeight, 0, gle.RED, gle.FLOAT, null)\n    _gl.framebufferTexture2D(gle.FRAMEBUFFER, gle.COLOR_ATTACHMENT0, gle.TEXTURE_2D, _txOdd, 0)\n\n    _gl.useProgram(_pass2)\n    _gl.uniform1i(uPass2('uSrc'), Texture.src)\n    _gl.uniform1i(uPass2('uLUT'), Texture.lut)\n    _gl.uniform1iv(uPass2('uCharMap'), _charMap)\n    _gl.viewport(0, 0, width, height)\n    _gl.drawArrays(gle.TRIANGLE_STRIP, 0, 4)\n\n    // read from framebuffer\n    _gl.readPixels(0, 0, width, height, gle.RED, gle.FLOAT, this._charCodes)\n\n    // disable framebuffer\n    _gl.bindFramebuffer(gle.FRAMEBUFFER, null)\n\n    for (let i = 0; i < this._charCodes.length;)\n      yield str(...this._charCodes.subarray(i, i += width))\n  }\n}\n","import { rgb } from 'wheels/esm/color/srgb'\nimport { random } from 'wheels/esm/math'\nimport { resize } from '../canvas'\nimport { Source } from '../types'\nimport { str } from '../utils'\nimport { Renderer } from './Renderer'\n\n// https://en.wikipedia.org/wiki/SRGB\nconst enum Y {\n  r = 0.2126,\n  g = 0.7152,\n  b = 0.0722\n}\n\nexport class CPURenderer extends Renderer {\n  *lines(src: Source, width: number, height: number) {\n    const { settings, _charMap, _luts } = this\n    const { lutWidth, lutHeight, brightness, gamma, noise } = settings\n\n    const srcWidth  = lutWidth  * width\n    const srcHeight = lutHeight * height\n    const srcʹ = resize(src, srcWidth, srcHeight)\n\n    const rgba = srcʹ.getImageData(0, 0, srcWidth, srcHeight).data\n    const buffer = new Float32Array(lutWidth * lutHeight)\n\n    for (let y = 0; y < srcHeight; y += lutHeight) {\n      const codes = []\n\n      for (let x = 0; x < srcWidth; x += lutWidth) {\n        let index = 0\n        let value = Infinity\n\n        for (let v = 0; v < lutHeight; v++) {\n          for (let u = 0; u < lutWidth; u++) {\n            let i = x+u + (y+v)*srcWidth << 2\n\n            const r = Y.r * rgb(rgba[i++] / 0xff)\n            const g = Y.g * rgb(rgba[i++] / 0xff)\n            const b = Y.b * rgb(rgba[i++] / 0xff)\n\n            const s = brightness * (r + g + b)**gamma\n            const n = noise * (random() - 0.5)\n\n            buffer[index++] = s + n // signal + noise\n          }\n        }\n\n        for (let i = _luts.length; i--;) {\n          const delta = _luts[i].compare(buffer)\n\n          if (delta < value) {\n            value = delta\n            index = i\n          }\n        }\n\n        codes.push(_charMap[index])\n      }\n\n      yield str(...codes)\n    }\n  }\n}\n"],"names":["overwrite","Object","assign","context2d","attributes","settings","element","getContext","name","document","createElement","str","String","fromCharCode","chr","charCodeAt","render","ctx","ref","Function","keys","monospaced","font","api","measureText","char","width","expand","pair","a","b","map","codes","Array","n","ascii","extended","extra","rgb","srgb","abs","clz32","floor","max","random","round","Math","msb","resize","src","w","h","srcʹ","CanvasRenderingContext2D","canvas","extract","wʹ","hʹ","height","tmp","drawImage","x","y","dst","LUT","Float32Array","[object Object]","super","this","charCode","fontWidth","fontHeight","fontFamily","fontBlur","fontGamma","fontBase","lutWidth","lutHeight","lutPadding","lutGamma","lutWidthʹ","lutHeightʹ","fontWidthʹ","fontHeightʹ","fillStyle","fillRect","translate","textAlign","i","m","filter","globalAlpha","fillText","lut","rgba","getImageData","data","length","luts","set","min","other","acc","Settings","Renderer","_charMap","_makeCharMap","_luts","_makeLUTs","charSet","charCodes","Int32Array","from","t","lutMin","lutMax","cc","maxʹ","reduce","normalize","lines","join","TRIANGLE_STRIP","UNSIGNED_BYTE","FLOAT","RGBA","FRAGMENT_SHADER","VERTEX_SHADER","TEXTURE_2D","TEXTURE0","FRAMEBUFFER","COLOR_ATTACHMENT0","RED","R32F","extensions","gl","Error","ext","getExtension","shader","type","source","sourceʹ","createShader","shaderSource","compileShader","getShaderParameter","getShaderInfoLog","lineNumbers","program","vert","frag","createProgram","attachShader","linkProgram","getProgramParameter","getProgramInfoLog","buffer","target","object","createBuffer","context","bindBuffer","texture","gle.TEXTURE_2D","createTexture","bindTexture","framebuffer","gle.FRAMEBUFFER","createFramebuffer","bindFramebuffer","uniforms","getUniformLocation","replace","padStart","bind","fn","base","pass1","pass2","filterNearest","texParameteri","quadGeometry","index","quad","of","bufferData","vertexAttribPointer","gle.FLOAT","enableVertexAttribArray","brightness","gamma","noise","srcWidth","srcHeight","value","Infinity","v","u","s","delta","compare","push","glu.api","glu.framebuffer","_gl","glu.texture","combine","vBase","glu.shader","gle.VERTEX_SHADER","fPass1","gle.FRAGMENT_SHADER","fPass2","chars","_pass1","glu.program","_pass2","glu.buffer","p","_lut","_","$","_fbo","l","_txOdd","_txEven","uPass1","glu.uniforms","uPass2","_charCodes","activeTexture","gle.TEXTURE0","_txLUT","texImage2D","gle.R32F","gle.RED","gle.RGBA","gle.UNSIGNED_BYTE","framebufferTexture2D","gle.COLOR_ATTACHMENT0","useProgram","uniform1i","uniform1f","viewport","drawArrays","gle.TRIANGLE_STRIP","uniform1iv","readPixels","subarray"],"mappings":"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"}