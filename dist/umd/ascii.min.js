((t,e)=>{"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t=t||self).ASCII={})})(this,function(t){"use strict";function*e(t=0,e=1/0,i=1){for(let n=t;e>n;n+=i)yield n}const i=Object.assign,n=(...t)=>(...e)=>i(r("canvas")(...t).getContext("2d"),...e),r=t=>(...e)=>i(document.createElement(t),...e),a=String.fromCharCode,s=t=>t.charCodeAt(0),o=t=>{const e=n()({font:`1em ${t}`}),i=e.measureText(" ");return t=>e.measureText(t).width===i.width},h=a(...e(32,95),...e(96,127)),l=h+a(...e(161,168),...e(174,178),169,171,172,180,181,183,187,191,215,247,...e(8216,8227),8249,8250,8729,8730,8734);var u={standard:h,extended:l};const{abs:d,clz32:f,floor:c,max:g,random:m,round:v}=Math;class x{constructor(){this.alphabet=h,this.quality="high",this.fontFace="monospace",this.fontWidth=40,this.fontHeight=70,this.fontBlur=6,this.fontGamma=1,this.lutWidth=5,this.lutHeight=7,this.lutPadding=1,this.brightness=1,this.gamma=1,this.noise=0}}class p extends x{get lutWidthPadded(){return 2*this.lutPadding+this.lutWidth}get lutHeightPadded(){return 2*this.lutPadding+this.lutHeight}get lutWidthRatio(){return this.lutWidthPadded/this.lutWidth}get lutHeightRatio(){return this.lutHeightPadded/this.lutHeight}get fontWidthPadded(){return v(this.lutWidthRatio*this.fontWidth)}get fontHeightPadded(){return v(this.lutHeightRatio*this.fontHeight)}}const b=t=>t>.04045?((t+.055)/1.055)**2.4:t/12.92,P=t=>1<<g(0,31-f(t)),y="imageSmoothingQuality"in CanvasRenderingContext2D.prototype?(t,e,i)=>{const r=n({width:e,height:i})({imageSmoothingQuality:"medium"});return r.drawImage(t.canvas,0,0,e,i),r}:(t,e,i)=>{let r=P(t.canvas.width/e-1)*e,a=P(t.canvas.height/i-1)*i;const s=n({width:r,height:a})();s.drawImage(t.canvas,0,0,r,a);for(let t,n;(t=r>e)||(n=a>i);)s.drawImage(s.canvas,0,0,r,a,0,0,r>>=t,a>>=n);const o=n({width:e,height:i})();return o.drawImage(s.canvas,0,0),o};class w extends Float32Array{constructor(t,e){super(t*e),this.width=t,this.height=e}static fromCharCode(t,e){const{fontFace:i,fontBlur:r,fontGamma:s}=e,{fontWidth:o,fontHeight:h,fontWidthPadded:l,fontHeightPadded:u}=e,{lutWidth:d,lutHeight:f,lutWidthPadded:c,lutHeightPadded:g,lutPadding:m}=e,v=n({width:l,height:u})(),x=a(t);v.fillStyle="#00f",v.fillRect(0,0,l,u),v.translate(l/2,u/2),v.fillStyle="#000",v.fillRect(-o/2,-h/2,o,h),v.translate(0,h/4),v.fillStyle="#fff",v.textAlign="center",v.font=`${h}px ${i}`;for(let t=0;r>t;)v.filter=`blur(${1<<t}px)`,v.globalAlpha=(++t/r)**s,v.fillText(x,0,0);const p=y(v,c,g).getImageData(m,m,d,f).data,P=new w(d,f);for(let t=0;P.length>t;t++)P[t]=b(p[t<<2]/255);return P}static combine(...t){const e=t[0].length,i=t.length,n=new w(e,i);for(let r=0;i>r;r++)n.set(t[r],r*e);return n}normalize(t,e){for(let i=0;this.length>i;i++)this[i]=(this[i]-t)/(e-t)}compare(t){let e=0;for(let i=this.length;i--;)e+=d(this[i]-t[i]);return e}}class S{constructor(t){this.settings=new p,i(this.settings,t),this.api=n()(),this.charMap=this.makeCharMap(),this.luts=this.makeLUTs()}makeCharMap(){const{alphabet:t,fontFace:e}=this.settings,i=[...t].filter(o(e)).map(s);return Uint16Array.from(i)}makeLUTs(){const{charMap:t,settings:e}=this,i=Array.from(t,t=>w.fromCharCode(t,e)),n=i.reduce((t,e)=>g(t,...e),0);for(const t of i)t.normalize(0,n);return i}resize(t,e,n){const{api:r,settings:a}=this;return i(r.canvas,{width:e,height:n}),r.imageSmoothingQuality=a.quality,r.drawImage(t,0,0,e,n),r}render(t,e,i){return[...this.lines(t,c(e),c(i))].join("\n")}}const T=5,C=5121,F=5126,A=6408,R=35632,H=35633,W=3553,U=33984,I=36160,L=36064,$=6403,D=33326,M=(t,...e)=>{const i=r("canvas")().getContext("webgl2",t);if(!i)throw Error("WebGL2 is not available");for(const t of e)if(!i.getExtension(t))throw Error(`"${t}" extension is not available`);return i},z=(t,e,i)=>{const n="#version 300 es\n"+i,r=t.createShader(e);if(t.shaderSource(r,n),t.compileShader(r),!t.getShaderParameter(r,35713))throw Error(`Shader error:\n${t.getShaderInfoLog(r)}\n${j(n)}\n`);return r},B=(t,e,i)=>{const n=t.createProgram();if(t.attachShader(n,e),t.attachShader(n,i),t.linkProgram(n),!t.getProgramParameter(n,35714))throw Error(`Program error: ${t.getProgramInfoLog(n)}`);return n},E=(t,e=34962)=>{const i=t.createBuffer();return O(t,i,i=>t.bindBuffer(e,i))},G=(t,e=W)=>{const i=t.createTexture();return O(t,i,i=>t.bindTexture(e,i))},_=(t,e=I)=>{const i=t.createFramebuffer();return O(t,i,i=>t.bindFramebuffer(e,i))},k=(t,e)=>i=>t.getUniformLocation(e,i),j=(t,e=1)=>t.replace(/^.*/gm,t=>((t,e)=>"0".repeat(g(0,t-e.length))+e)(5,`${e++}: `)+t),O=(t,e,i)=>n=>(n&&(i(e),n(t,e),i(null)),e),X=(t,e,i="$")=>Function(i,"{"+Object.keys(e)+"}","return `"+t+"`")(e,e),V="in vec2 aPosition;\nout vec2 vPosition;\nvoid main() {\nvPosition = 0.5 + 0.5*aPosition;\ngl_Position = vec4(aPosition, 0., 1.);\n}\n",N="#define MAP3(f, v) vec3(f(v.x), f(v.y), f(v.z))\n#define RGB(x) mix(x/12.92, pow((x+.055)/1.055, 2.4), step(.04045, x))\n#define LUM(x) dot(x, vec3(.2126, .7152, .0722))\nprecision mediump float;\nuniform sampler2D uSrc;\nuniform float uBrightness;\nuniform float uGamma;\nuniform float uNoise;\nuniform float uRandom;\nin vec2 vPosition;\nout vec4 vFragColor;\nfloat hash13(vec3 p3) {\np3 = fract(p3 * 0.1031);\np3 += dot(p3, p3.yzx + 19.19);\nreturn fract((p3.x + p3.y) * p3.z);\n}\nvoid main() {\nvec3 srgb = texture(uSrc, vPosition).rgb;\nfloat signal = uBrightness * pow(LUM(MAP3(RGB, srgb)), uGamma);\nfloat noise = uNoise * (hash13(vec3(gl_FragCoord.xy, 1000.*uRandom)) - 0.5);\nvFragColor = vec4(vec3(clamp(signal + noise, 0., 1.)), 0.);\n}\n",Q="#define U ${settings.lutWidth}\n#define V ${settings.lutHeight}\n#define X ${lut.width}\n#define Y ${lut.height}\nprecision mediump float;\nuniform sampler2D uSrc;\nuniform sampler2D uLUT;\nin vec2 vPosition;\nout vec4 vFragColor;\nstruct Result {\nint index;\nfloat value;\n};\nvoid main() {\nResult res = Result(0, float(X));\nivec2 pos = ivec2(vec2(textureSize(uSrc, 0))*vPosition) - ivec2(U, V)/2;\nfloat src[X];\nfor (int v = 0; v < V; v++)\nfor (int u = 0; u < U; u++)\nsrc[u + v*U] = texelFetch(uSrc, pos + ivec2(u, v), 0).r;\nfor (int y = 0; y < Y; y++) {\nfloat value = 0.;\nfor (int x = 0; x < X; x++)\nvalue += abs(src[x] - texelFetch(uLUT, ivec2(x, y), 0).r);\nif (res.value > value)\nres = Result(y, value);\n}\nvFragColor = vec4(res.index, 0, 0, 0);\n}\n",q=t=>{t.texParameteri(W,10241,9728),t.texParameteri(W,10240,9728)},Y=t=>e=>{const i=Float32Array.of(1,1,-1,1,1,-1,-1,-1);e.bufferData(34962,i,35044),e.vertexAttribPointer(t,2,F,!1,0,0),e.enableVertexAttribArray(t)};t.CoreSettings=x,t.HardwareRenderer=class extends S{constructor(t){super(t),this.gl=M({},"EXT_color_buffer_float"),this.fbo=_(this.gl)(),this.txLUT=G(this.gl)(q),this.txOdd=G(this.gl)(q),this.txEven=G(this.gl)(q),this.lut=w.combine(...this.luts),this.indices=new Float32Array;const e=z(this.gl,H,X(V,this)),i=z(this.gl,R,X(N,this)),n=z(this.gl,R,X(Q,this));this.pass1=B(this.gl,e,i),this.pass2=B(this.gl,e,n),E(this.gl)(Y(0))}*lines(t,e,i){const{settings:n,charMap:r,lut:s,gl:o,pass1:h,pass2:l,fbo:u,txLUT:d,txOdd:f,txEven:c}=this,g=n.lutWidth*e,m=n.lutHeight*i,v=this.resize(t,g,m).canvas,x=k(o,h),p=k(o,l);this.indices.length!==e*i&&(this.indices=new Float32Array(e*i)),o.bindFramebuffer(I,u),o.activeTexture(U+2),o.bindTexture(W,d),o.texImage2D(W,0,D,s.width,s.height,0,$,F,s),o.activeTexture(U+1),o.bindTexture(W,f),o.texImage2D(W,0,A,A,C,v),o.activeTexture(U+0),o.bindTexture(W,c),o.texImage2D(W,0,D,g,m,0,$,F,null),o.framebufferTexture2D(I,L,W,c,0),o.useProgram(h),o.uniform1i(x("uSrc"),1),o.uniform1f(x("uBrightness"),n.brightness),o.uniform1f(x("uGamma"),n.gamma),o.uniform1f(x("uNoise"),n.noise),o.uniform1f(x("uRandom"),Math.random()),o.viewport(0,0,g,m),o.drawArrays(T,0,4),o.activeTexture(U+1),o.bindTexture(W,c),o.activeTexture(U+0),o.bindTexture(W,f),o.texImage2D(W,0,D,g,m,0,$,F,null),o.framebufferTexture2D(I,L,W,f,0),o.useProgram(l),o.uniform1i(p("uSrc"),1),o.uniform1i(p("uLUT"),2),o.viewport(0,0,e,i),o.drawArrays(T,0,4),o.readPixels(0,0,e,i,$,F,this.indices),o.bindFramebuffer(I,null);for(let t=0;this.indices.length>t;){const i=this.indices.subarray(t,t+=e),n=Array.from(i,t=>r[t]);yield a(...n)}}},t.LUT=w,t.Renderer=S,t.Settings=p,t.SoftwareRenderer=class extends S{*lines(t,e,i){const{settings:n,charMap:r,luts:s}=this,{lutWidth:o,lutHeight:h,brightness:l,gamma:u,noise:d}=n,f=o*e,c=h*i,g=this.resize(t,f,c).getImageData(0,0,f,c).data,v=new Float32Array(o*h);for(let t=0;c>t;t+=h){const e=[];for(let i=0;f>i;i+=o){let n=0,a=1/0;for(let e=0;h>e;e++)for(let r=0;o>r;r++){let a=i+r+(t+e)*f<<2;const s=l*(.2126*b(g[a++]/255)+.7152*b(g[a++]/255)+.0722*b(g[a++]/255))**u,o=d*(m()-.5);v[n++]=s+o}for(let t=s.length;t--;){const e=s[t].compare(v);a>e&&(a=e,n=t)}e.push(r[n])}yield a(...e)}}},t.alphabets=u,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=ascii.min.js.map
