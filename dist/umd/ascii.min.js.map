{"version":3,"file":"ascii.min.js","sources":["../../node_modules/wheels/esm/color/srgb.js","../../node_modules/wheels/esm/math/native.js","../../node_modules/wheels/esm/fp/iter.js","../../node_modules/wheels/esm/object/index.js","../../node_modules/wheels/esm/dom/index.js","../../node_modules/wheels/esm/text/format.js","../../src/classes/Shader.ts","../../src/classes/shaders/Setup.ts","../../src/classes/shaders/Pass1.ts","../../src/classes/shaders/Pass2.ts","../../src/classes/Renderer.ts","../../src/classes/ASCIICoreSettings.ts","../../src/classes/ASCIISettings.ts","../../src/downscale.ts","../../src/classes/ASCII.ts"],"sourcesContent":["export const rgb = (srgb) => srgb <= 0.04045 ? srgb / 12.92 : ((srgb + 0.055) / 1.055) ** 2.4;\nexport const srgb = (rgb) => rgb <= 0.0031308 ? rgb * 12.92 : (rgb ** (1 / 2.4)) * 1.055 - 0.055;\n","export const { abs, acos, acosh, asin, asinh, atan, atan2, atanh, cbrt, ceil, clz32, cos, cosh, exp, expm1, floor, fround, hypot, imul, log, log10, log1p, log2, max, min, pow, random, round, sign, sin, sinh, sqrt, tan, tanh, trunc, E, LN10, LN2, LOG10E, LOG2E, PI, SQRT1_2, SQRT2 } = Math;\nexport const { isFinite, isInteger, isNaN, isSafeInteger, parseFloat, parseInt, EPSILON, MAX_SAFE_INTEGER, MAX_VALUE, MIN_SAFE_INTEGER, MIN_VALUE, NEGATIVE_INFINITY, POSITIVE_INFINITY } = Number;\n","export const filter = (fn) => function* (it) {\n    for (const value of it)\n        if (fn(value))\n            yield value;\n};\nexport const map = (fn) => function* (it) {\n    for (const value of it)\n        yield fn(value);\n};\nexport const reduce = (fn) => (acc) => (it) => {\n    let acc聞 = acc;\n    for (const value of it)\n        acc聞 = fn(acc聞, value);\n    return acc聞;\n};\nexport const range = function* (min, max, step = 1) {\n    for (let number = min; number < max; number += step)\n        yield number;\n};\nexport const matcher = (re) => function* (input) {\n    for (let match; match = re.exec(input);)\n        yield match;\n};\n","export const extend = Object.assign;\nexport const overwrite = extend;\nexport const copy = (object) => overwrite({}, object);\nexport const get = (object, path, sep = '.') => path.split(sep).reduce((o, next) => o && o[next], object);\nexport const proto = (object) => {\n    const props = new Set();\n    for (let o = object; o && o !== Object.prototype; o = Object.getPrototypeOf(o))\n        Object.getOwnPropertyNames(o).forEach(prop => props.add(prop));\n    return props;\n};\n","import { overwrite } from '../object';\nexport const element = name => options => overwrite(document.createElement(name), options);\nexport const append = (parent) => (...children) => children.forEach(child => parent.appendChild(child));\nexport const prevent = (fn) => (event) => event.preventDefault() || fn && fn(event);\nexport const frame = () => new Promise(resolve => requestAnimationFrame(resolve));\nexport const context2d = (options) => element('canvas')(options).getContext('2d');\n","import { get } from '../object';\nexport const tag = ([head, ...tail], ...fns) => obj => fns.reduce((acc, fn, i) => acc + fn(obj) + tail[i], head);\nexport const format = (re) => (tmpl) => (...args) => tmpl.replace(re, (_, path) => get(args, path));\nexport const brackets = format(/{(.*?)}/g);\nexport const hashBrackets = format(/#{(.*?)}/g);\nexport const dollarBrackets = format(/\\${(.*?)}/g);\nexport const doubleBrackets = format(/{{(.*?)}}/g);\n","import { hashBrackets as format } from 'wheels/esm/text/format'\nimport { copy } from 'wheels/esm/object'\n\nexport class Shader {\n  command: any\n\n  constructor(\n    private readonly regl: any,\n    private readonly binds: any\n  ) {}\n\n  compile(...args: any[]) {\n    const binds = copy(this.binds)\n    const { vert, frag } = binds\n    if (vert) binds.vert = format(vert)(...args)\n    if (frag) binds.frag = format(frag)(...args)\n    this.command = this.regl(binds)\n  }\n}\n","import { Shader } from '../Shader'\nimport vert from 'glsl/setup.vert'\n\nexport class Setup extends Shader {\n  constructor(regl: any) {\n    super(regl, {\n      vert,\n      depth: {\n        enable: false\n      },\n      attributes: {\n        aPosition: [1, 1, -1, 1, 1, -1, -1, -1]\n      },\n      primitive: 'triangle strip',\n      count: 4\n    })\n  }\n}\n","import { Shader } from '../Shader'\nimport frag from 'glsl/pass1.frag'\n\nexport class Pass1 extends Shader {\n  constructor(regl: any) {\n    super(regl, {\n      frag,\n      framebuffer: regl.prop('dst'),\n      uniforms: {\n        uSrc: regl.prop('src'),\n        uBrightness: regl.prop('brightness'),\n        uGamma: regl.prop('gamma'),\n        uNoise: regl.prop('noise'),\n        uTime: regl.context('time')\n      }\n    })\n  }\n}\n","import { Shader } from '../Shader'\nimport frag from 'glsl/pass2.frag'\n\nexport class Pass2 extends Shader {\n  constructor(regl: any) {\n    super(regl, {\n      frag,\n      framebuffer: regl.prop('dst'),\n      context: {\n        src: regl.prop('src'),\n        lut: regl.prop('lut')\n      },\n      uniforms: {\n        uSrc: regl.context('src'),\n        uLut: regl.context('lut'),\n        uSrcSize: ({ src }: any) => [ src.width, src.height ],\n        uLutSize: ({ lut }: any) => [ lut.width, lut.height ]\n      }\n    })\n  }\n}\n","import { Setup } from './shaders/Setup'\nimport { Pass1 } from './shaders/Pass1'\nimport { Pass2 } from './shaders/Pass2'\nimport { ASCII } from './ASCII'\n\nexport type Renderable =\n  HTMLImageElement  |\n  HTMLCanvasElement |\n  HTMLVideoElement  |\n  ImageBitmap\n\nexport class Renderer {\n  private readonly src: any // regl textures\n  private readonly lut: any\n\n  private readonly fbo1: any // regl framebufers\n  private readonly fbo2: any\n\n  private readonly setup: Setup\n  private readonly pass1: Pass1\n  private readonly pass2: Pass2\n\n  private bytes = new Uint8Array(1)\n\n  constructor(private readonly ascii: ASCII) {\n    const { regl } = ascii\n\n    this.src = regl.texture()\n    this.lut = regl.texture()\n\n    this.fbo1 = regl.framebuffer({ depthStencil: false, colorType: 'float' })\n    this.fbo2 = regl.framebuffer({ depthStencil: false })\n\n    this.setup = new Setup(regl)\n    this.pass1 = new Pass1(regl)\n    this.pass2 = new Pass2(regl)\n  }\n\n  update() {\n    const { ascii } = this\n\n    this.lut({\n      format: 'alpha',\n      type: 'float',\n      data: ascii.luts\n    })\n\n    this.setup.compile(ascii)\n    this.pass1.compile(ascii)\n    this.pass2.compile(ascii)\n  }\n\n  render(renderable: Renderable, width: number, height: number) {\n    const { ascii, src, lut, fbo1, fbo2 } = this\n    const { regl, settings } = ascii\n    const { brightness, gamma, noise } = settings\n\n    const w = settings.lutWidth  * width\n    const h = settings.lutHeight * height\n\n    const length = width * height << 2\n    if (this.bytes.length !== length)\n      this.bytes = new Uint8Array(length)\n\n    src(renderable)\n\n    fbo1.resize(w, h)\n    fbo2.resize(width, height)\n    regl.poll()\n\n    this.setup.command(() => {\n      this.pass1.command({ dst: fbo1, src, brightness, gamma, noise })\n      this.pass2.command({ dst: fbo2, src: fbo1, lut }, () => {\n        regl.draw()\n        regl.read(this.bytes)\n      })\n    })\n\n    return this.bytes\n  }\n}\n","export class ASCIICoreSettings {\n  optimized  = true\n  fontFace   = 'monospace'\n  fontWidth  = 40\n  fontHeight = 70\n  fontBlur   = 6\n  lutWidth   = 5\n  lutHeight  = 7\n  lutPadding = 1\n  brightness = 1\n  gamma      = 1\n  noise      = 0\n}\n","import { round } from 'wheels/esm/math'\nimport { ASCIICoreSettings } from './ASCIICoreSettings'\n\nexport class ASCIISettings extends ASCIICoreSettings {\n  get lutWidthPadded()   { return this.lutPadding*2 + this.lutWidth }\n  get lutHeightPadded()  { return this.lutPadding*2 + this.lutHeight }\n  get lutWidthRatio()    { return this.lutWidthPadded  / this.lutWidth }\n  get lutHeightRatio()   { return this.lutHeightPadded / this.lutHeight }\n  get fontWidthPadded()  { return round(this.lutWidthRatio  * this.fontWidth) }\n  get fontHeightPadded() { return round(this.lutHeightRatio * this.fontHeight) }\n}\n","import { max, clz32 } from 'wheels/esm/math'\nimport { context2d } from 'wheels/esm/dom'\n\n/** Most Significant Bit, but f(x) is always >=1 */\nconst msb = (n: number) => 1 << max(0, 31 - clz32(n))\n\nconst fallback = (src: CanvasRenderingContext2D, width: number, height: number) => {\n  let w = msb(src.canvas.width  / width  - 1) * width\n  let h = msb(src.canvas.height / height - 1) * height\n\n  const tmp = context2d({ width: w, height: h })\n  tmp.drawImage(src.canvas, 0, 0, w, h)\n  for (let x: any, y: any; (x = w > width) || (y = h > height);)\n    tmp.drawImage(tmp.canvas, 0, 0, w, h, 0, 0, w >>= x, h >>= y)\n\n  const dst = context2d({ width, height })\n  dst.drawImage(tmp.canvas, 0, 0)\n  return dst\n}\n\nconst native = (src: CanvasRenderingContext2D, width: number, height: number) => {\n  const dst = context2d({ width, height })\n  dst.imageSmoothingQuality = 'medium'\n  dst.drawImage(src.canvas, 0, 0, width, height)\n  return dst\n}\n\nexport const downscale =\n  'imageSmoothingQuality' in CanvasRenderingContext2D.prototype\n    ? native\n    : fallback\n","import { rgb } from 'wheels/esm/color/srgb'\nimport { max } from 'wheels/esm/math'\nimport { range } from 'wheels/esm/fp'\nimport { overwrite } from 'wheels/esm/object'\nimport { element, context2d } from 'wheels/esm/dom'\nimport { Renderer, Renderable } from './Renderer'\nimport { ASCIICoreSettings } from './ASCIICoreSettings'\nimport { ASCIISettings } from './ASCIISettings'\nimport { downscale } from '../downscale'\n\nexport class ASCII {\n  regl: any\n  luts!: Float32Array[]\n  renderer: Renderer\n  settings = new ASCIISettings\n  charMap = Uint8Array.from(range(0x20, 0x7f)) // from \" \" to \"~\"\n\n  constructor(REGL: any, settings?: Partial<ASCIICoreSettings>) {\n    const canvas = element('canvas')()\n    const extensions = [ 'OES_texture_float' ]\n    this.regl = REGL({ canvas, extensions })\n    this.renderer = new Renderer(this)\n    this.update(settings)\n  }\n\n  private makeGlyph(charCode: number) {\n    const { fontFace, fontBlur, fontWidth, fontHeight, fontWidthPadded, fontHeightPadded } = this.settings\n    const glyph = context2d({ width: fontWidthPadded, height: fontHeightPadded })\n    const char = String.fromCharCode(charCode)\n\n    glyph.fillStyle = '#00f'\n    glyph.fillRect(0, 0, fontWidthPadded, fontHeightPadded)\n\n    glyph.fillStyle = '#000'\n    glyph.translate(fontWidthPadded/2, fontHeightPadded/2)\n    glyph.fillRect(-fontWidth/2, -fontHeight/2, fontWidth, fontHeight)\n\n    glyph.fillStyle = '#fff'\n    glyph.textAlign = 'center'\n    glyph.font = `${fontHeight}px ${fontFace}`\n    glyph.translate(0, fontHeight/4)\n\n    for (let i = 0; i < fontBlur;) {\n      glyph.filter = `blur(${1<<i}px)`\n      glyph.globalAlpha = ++i/fontBlur\n      glyph.fillText(char, 0, 0)\n    }\n\n    return glyph\n  }\n\n  private makeLut(charCode: number) {\n    const { lutWidth, lutHeight, lutPadding, lutWidthPadded, lutHeightPadded } = this.settings\n    const scaled = downscale(this.makeGlyph(charCode), lutWidthPadded, lutHeightPadded)\n    const bytes = scaled.getImageData(lutPadding, lutPadding, lutWidth, lutHeight).data\n    const floats = new Float32Array(bytes.length >> 2)\n\n    for (let i = 0; i < floats.length; i++)\n      floats[i] = bytes[i << 2] / 0xff\n\n    return floats\n  }\n\n  private makeLuts() {\n    const luts = Array.from(this.charMap, cc => this.makeLut(cc))\n    const brightest = luts.reduce((m, lut) => max(m, max(...lut)), 0)\n    luts.forEach(lut => lut.forEach((x, i) => lut[i] = rgb(x / brightest)))\n    return luts\n  }\n\n  update(settings?: Partial<ASCIICoreSettings>) {\n    overwrite(this.settings, settings!)\n    this.luts = this.makeLuts()\n    this.renderer.update()\n  }\n\n  render(renderable: Renderable, width: number, height: number) {\n    const { renderer, charMap } = this\n    const bytes = renderer.render(renderable, width, height)\n\n    let i = 0, j = 0\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++)\n        bytes[i++] = charMap[bytes[j++ << 2]]\n      bytes[i++] = 0xa\n    }\n\n    const codes = bytes.subarray(0, i)\n    const chars = String.fromCharCode(...codes)\n    return chars\n  }\n}\n"],"names":["rgb","srgb","clz32","max","round","Math","range","min","step","number","overwrite","Object","assign","copy","object","element","name","options","document","createElement","context2d","getContext","hashBrackets","re","tmpl","args","replace","_","path","sep","split","reduce","o","next","get","format","Shader","[object Object]","regl","binds","this","vert","frag","command","Setup","super","depth","enable","attributes","aPosition","primitive","count","Pass1","framebuffer","prop","uniforms","uSrc","uBrightness","uGamma","uNoise","uTime","context","Pass2","src","lut","uLut","uSrcSize","width","height","uLutSize","Renderer","ascii","Uint8Array","texture","fbo1","depthStencil","colorType","fbo2","setup","pass1","pass2","type","data","luts","compile","renderable","settings","brightness","gamma","noise","w","lutWidth","h","lutHeight","length","bytes","resize","poll","dst","draw","read","ASCIICoreSettings","ASCIISettings","lutWidthPadded","lutPadding","lutHeightPadded","lutWidthRatio","lutHeightRatio","fontWidthPadded","fontWidth","fontHeightPadded","fontHeight","msb","n","downscale","CanvasRenderingContext2D","prototype","imageSmoothingQuality","drawImage","canvas","tmp","x","y","REGL","from","extensions","renderer","update","charCode","fontFace","fontBlur","glyph","char","String","fromCharCode","fillStyle","fillRect","translate","textAlign","font","i","filter","globalAlpha","fillText","makeGlyph","getImageData","floats","Float32Array","Array","charMap","cc","makeLut","brightest","m","forEach","makeLuts","render","j","codes","subarray"],"mappings":"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"}